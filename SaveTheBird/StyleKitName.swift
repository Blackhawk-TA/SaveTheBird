//
//  StyleKitName.swift
//  SaveTheBird
//
//  Created by Daniel Peters on 24.10.16.
//  Copyright (c) 2016 TapAdventures. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKitName : NSObject {

    //// Cache

    private struct Cache {
        static let grass: UIColor = UIColor(red: 0.106, green: 0.773, blue: 0.027, alpha: 1.000)
        static let sand: UIColor = UIColor(red: 0.851, green: 0.710, blue: 0.298, alpha: 1.000)
        static let sky: UIColor = UIColor(red: 0.651, green: 1.000, blue: 1.000, alpha: 1.000)
        static let wood: UIColor = UIColor(red: 0.463, green: 0.204, blue: 0.067, alpha: 1.000)
        static let gold: UIColor = UIColor(red: 1.000, green: 0.843, blue: 0.000, alpha: 1.000)
        static let sunYellow: UIColor = UIColor(red: 1.000, green: 0.765, blue: 0.000, alpha: 1.000)
        static let grass2: UIColor = UIColor(red: 0.106, green: 0.773, blue: 0.027, alpha: 1.000)
        static let shadow_Light: NSShadow = NSShadow(color: UIColor.black.withAlphaComponent(0.7), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)
    }

    //// Colors

    public class var grass: UIColor { return Cache.grass }
    public class var sand: UIColor { return Cache.sand }
    public class var sky: UIColor { return Cache.sky }
    public class var wood: UIColor { return Cache.wood }
    public class var gold: UIColor { return Cache.gold }
    public class var sunYellow: UIColor { return Cache.sunYellow }
    public class var grass2: UIColor { return Cache.grass2 }

    //// Shadows

    public class var shadow_Light: NSShadow { return Cache.shadow_Light }

    //// Drawing Methods

    public class func drawMenuBar(frame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 90), isSelected: Bool = true, menuBarIcon: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Variable Declarations
        let menuBarSelected = isSelected ? StyleKitName.grass : white
        let menuBar_Play = menuBarIcon == 0 ? true : (menuBarIcon == 1 ? false : (menuBarIcon == 2 ? false : (menuBarIcon == 3 ? false : false)))
        let menuBar_Store = menuBarIcon == 0 ? false : (menuBarIcon == 1 ? true : (menuBarIcon == 2 ? false : (menuBarIcon == 3 ? false : false)))
        let menuBar_Bank = menuBarIcon == 0 ? false : (menuBarIcon == 1 ? false : (menuBarIcon == 2 ? true : (menuBarIcon == 3 ? false : false)))
        let menuBar_Highscore = menuBarIcon == 0 ? false : (menuBarIcon == 1 ? false : (menuBarIcon == 2 ? false : (menuBarIcon == 3 ? true : false)))

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5)), byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.topRight], cornerRadii: CGSize(width: 10, height: 10))
        rectanglePath.close()
        menuBarSelected.setFill()
        rectanglePath.fill()
        UIColor.black.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: frame.minX + floor(frame.width * 0.02813) + 0.5, y: frame.minY + floor(frame.height * 0.03889) + 0.5, width: floor(frame.width * 0.97813) - floor(frame.width * 0.02813), height: floor(frame.height * 0.96111) - floor(frame.height * 0.03889)), cornerRadius: 10)
        StyleKitName.sky.setFill()
        rectangle2Path.fill()
        UIColor.black.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        if (menuBar_Highscore) {
            //// Highscores Drawing
            let highscoresPath = UIBezierPath()
            highscoresPath.move(to: CGPoint(x: frame.minX + 0.50313 * frame.width, y: frame.minY + 0.10000 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.57396 * frame.width, y: frame.minY + 0.33565 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.73346 * frame.width, y: frame.minY + 0.37255 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.61774 * frame.width, y: frame.minY + 0.55510 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.64548 * frame.width, y: frame.minY + 0.81356 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.50313 * frame.width, y: frame.minY + 0.69073 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.36077 * frame.width, y: frame.minY + 0.81356 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.38851 * frame.width, y: frame.minY + 0.55510 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.27279 * frame.width, y: frame.minY + 0.37255 * frame.height))
            highscoresPath.addLine(to: CGPoint(x: frame.minX + 0.43229 * frame.width, y: frame.minY + 0.33565 * frame.height))
            highscoresPath.close()
            context!.saveGState()
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
            StyleKitName.gold.setFill()
            highscoresPath.fill()

            ////// Highscores Inner Shadow
            context!.saveGState()
            context!.clip(to: highscoresPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let highscoresOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: highscoresOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            highscoresOpaqueShadow.setFill()
            highscoresPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            highscoresPath.lineWidth = 1
            highscoresPath.stroke()
        }


        if (menuBar_Bank) {
            //// Bank Drawing
            let bankPath = UIBezierPath()
            bankPath.move(to: CGPoint(x: frame.minX + 0.17188 * frame.width, y: frame.minY + 0.82778 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.84062 * frame.width, y: frame.minY + 0.82778 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.84062 * frame.width, y: frame.minY + 0.77222 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.17188 * frame.width, y: frame.minY + 0.77222 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.17188 * frame.width, y: frame.minY + 0.82778 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.22187 * frame.width, y: frame.minY + 0.77222 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.77812 * frame.width, y: frame.minY + 0.77222 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.77812 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.22187 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.22187 * frame.width, y: frame.minY + 0.77222 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.28437 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.35938 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.35938 * frame.width, y: frame.minY + 0.40556 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.28437 * frame.width, y: frame.minY + 0.40556 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.28437 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.46563 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.54063 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.54063 * frame.width, y: frame.minY + 0.40556 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.46563 * frame.width, y: frame.minY + 0.40556 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.46563 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.63438 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.70937 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.70937 * frame.width, y: frame.minY + 0.40556 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.63438 * frame.width, y: frame.minY + 0.40556 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.63438 * frame.width, y: frame.minY + 0.71667 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.50157 * frame.width, y: frame.minY + 0.11112 * frame.height))
            bankPath.addCurve(to: CGPoint(x: frame.minX + 0.76725 * frame.width, y: frame.minY + 0.31667 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.50156 * frame.width, y: frame.minY + 0.11111 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.73535 * frame.width, y: frame.minY + 0.29198 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.77812 * frame.width, y: frame.minY + 0.31667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.77812 * frame.width, y: frame.minY + 0.40556 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.22187 * frame.width, y: frame.minY + 0.40556 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.22187 * frame.width, y: frame.minY + 0.31667 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.23587 * frame.width, y: frame.minY + 0.31667 * frame.height))
            bankPath.addCurve(to: CGPoint(x: frame.minX + 0.50156 * frame.width, y: frame.minY + 0.11111 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.26778 * frame.width, y: frame.minY + 0.29198 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.50156 * frame.width, y: frame.minY + 0.11111 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.50157 * frame.width, y: frame.minY + 0.11112 * frame.height))
            bankPath.close()
            context!.saveGState()
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            bankPath.fill()

            ////// Bank Inner Shadow
            context!.saveGState()
            context!.clip(to: bankPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let bankOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: bankOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            bankOpaqueShadow.setFill()
            bankPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            bankPath.lineWidth = 1
            bankPath.stroke()
        }


        if (menuBar_Store) {
            //// ShopPlaceholder Drawing
            let shopPlaceholderPath = UIBezierPath()
            shopPlaceholderPath.move(to: CGPoint(x: frame.minX + 0.68125 * frame.width, y: frame.minY + 0.43334 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.68125 * frame.width, y: frame.minY + 0.45556 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.68125 * frame.width, y: frame.minY + 0.47778 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.42500 * frame.width, y: frame.minY + 0.47778 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.42500 * frame.width, y: frame.minY + 0.45556 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.42500 * frame.width, y: frame.minY + 0.43333 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.68125 * frame.width, y: frame.minY + 0.43334 * frame.height))
            shopPlaceholderPath.close()
            shopPlaceholderPath.move(to: CGPoint(x: frame.minX + 0.65625 * frame.width, y: frame.minY + 0.52223 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.65625 * frame.width, y: frame.minY + 0.54444 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.65625 * frame.width, y: frame.minY + 0.56667 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.45000 * frame.width, y: frame.minY + 0.56667 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.45000 * frame.width, y: frame.minY + 0.54444 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.45000 * frame.width, y: frame.minY + 0.52222 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.65625 * frame.width, y: frame.minY + 0.52223 * frame.height))
            shopPlaceholderPath.close()
            shopPlaceholderPath.move(to: CGPoint(x: frame.minX + 0.26940 * frame.width, y: frame.minY + 0.20182 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.28944 * frame.width, y: frame.minY + 0.21621 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.26939 * frame.width, y: frame.minY + 0.20182 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.27871 * frame.width, y: frame.minY + 0.20850 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.32125 * frame.width, y: frame.minY + 0.23905 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.30403 * frame.width, y: frame.minY + 0.22669 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.32125 * frame.width, y: frame.minY + 0.23905 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.37311 * frame.width, y: frame.minY + 0.27629 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.37079 * frame.width, y: frame.minY + 0.28650 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.37311 * frame.width, y: frame.minY + 0.27629 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.37215 * frame.width, y: frame.minY + 0.28049 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.37634 * frame.width, y: frame.minY + 0.31389 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.37282 * frame.width, y: frame.minY + 0.29650 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.37634 * frame.width, y: frame.minY + 0.31389 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.37825 * frame.width, y: frame.minY + 0.32334 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.37634 * frame.width, y: frame.minY + 0.31389 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.37701 * frame.width, y: frame.minY + 0.31722 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.43426 * frame.width, y: frame.minY + 0.60000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.38537 * frame.width, y: frame.minY + 0.35853 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.41115 * frame.width, y: frame.minY + 0.48585 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.68583 * frame.width, y: frame.minY + 0.60000 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.69773 * frame.width, y: frame.minY + 0.48440 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.69070 * frame.width, y: frame.minY + 0.55264 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.69773 * frame.width, y: frame.minY + 0.48440 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.71420 * frame.width, y: frame.minY + 0.32435 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.74494 * frame.width, y: frame.minY + 0.33435 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.71199 * frame.width, y: frame.minY + 0.65445 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.70000 * frame.width, y: frame.minY + 0.65054 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.71199 * frame.width, y: frame.minY + 0.65445 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.70641 * frame.width, y: frame.minY + 0.65263 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.70000 * frame.width, y: frame.minY + 0.65556 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.70000 * frame.width, y: frame.minY + 0.65352 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.70000 * frame.width, y: frame.minY + 0.65556 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.44551 * frame.width, y: frame.minY + 0.65556 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.45451 * frame.width, y: frame.minY + 0.70004 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.44866 * frame.width, y: frame.minY + 0.67115 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.45169 * frame.width, y: frame.minY + 0.68608 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.46582 * frame.width, y: frame.minY + 0.70309 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.45842 * frame.width, y: frame.minY + 0.70024 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.46221 * frame.width, y: frame.minY + 0.70129 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.49733 * frame.width, y: frame.minY + 0.75555 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.48051 * frame.width, y: frame.minY + 0.71043 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.49228 * frame.width, y: frame.minY + 0.73017 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.60892 * frame.width, y: frame.minY + 0.75555 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.49733 * frame.width, y: frame.minY + 0.75555 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.56208 * frame.width, y: frame.minY + 0.75555 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.64502 * frame.width, y: frame.minY + 0.70124 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.61448 * frame.width, y: frame.minY + 0.72757 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.62821 * frame.width, y: frame.minY + 0.70645 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.65312 * frame.width, y: frame.minY + 0.70000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.64765 * frame.width, y: frame.minY + 0.70043 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.65036 * frame.width, y: frame.minY + 0.70000 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.70000 * frame.width, y: frame.minY + 0.78333 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.67901 * frame.width, y: frame.minY + 0.70000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.70000 * frame.width, y: frame.minY + 0.73731 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.65312 * frame.width, y: frame.minY + 0.86667 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.70000 * frame.width, y: frame.minY + 0.82936 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.67901 * frame.width, y: frame.minY + 0.86667 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.60892 * frame.width, y: frame.minY + 0.81111 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.63272 * frame.width, y: frame.minY + 0.86667 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.61535 * frame.width, y: frame.minY + 0.84348 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.49733 * frame.width, y: frame.minY + 0.81111 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.45312 * frame.width, y: frame.minY + 0.86667 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.49090 * frame.width, y: frame.minY + 0.84348 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.47353 * frame.width, y: frame.minY + 0.86667 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.78333 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.42724 * frame.width, y: frame.minY + 0.86667 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.82936 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.42474 * frame.width, y: frame.minY + 0.71702 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.75628 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.41350 * frame.width, y: frame.minY + 0.73224 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.34331 * frame.width, y: frame.minY + 0.31480 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39865 * frame.width, y: frame.minY + 0.58814 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.35553 * frame.width, y: frame.minY + 0.37516 * frame.height))
            shopPlaceholderPath.addCurve(to: CGPoint(x: frame.minX + 0.25769 * frame.width, y: frame.minY + 0.25333 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.31358 * frame.width, y: frame.minY + 0.29346 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.25769 * frame.width, y: frame.minY + 0.25333 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.26939 * frame.width, y: frame.minY + 0.20182 * frame.height))
            shopPlaceholderPath.addLine(to: CGPoint(x: frame.minX + 0.26940 * frame.width, y: frame.minY + 0.20182 * frame.height))
            shopPlaceholderPath.close()
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            shopPlaceholderPath.fill()

            ////// ShopPlaceholder Inner Shadow
            context!.saveGState()
            context!.clip(to: shopPlaceholderPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let shopPlaceholderOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: shopPlaceholderOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            shopPlaceholderOpaqueShadow.setFill()
            shopPlaceholderPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            shopPlaceholderPath.lineWidth = 1
            shopPlaceholderPath.stroke()
        }


        if (menuBar_Play) {
            //// Symbol Drawing
            let symbolRect = CGRect(x: frame.minX + floor(frame.width * 0.25625 + 0.5), y: frame.minY + floor(frame.height * 0.07778 + 0.5), width: floor(frame.width * 0.81875 + 0.5) - floor(frame.width * 0.25625 + 0.5), height: floor(frame.height * 0.91111 + 0.5) - floor(frame.height * 0.07778 + 0.5))
            context!.saveGState()
            UIRectClip(symbolRect)
            context!.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

            StyleKitName.drawBird(frame: CGRect(x: 0, y: 0, width: symbolRect.size.width, height: symbolRect.size.height), golden: false, colorInput: 0, bird_wing_down: true, bird_wing_up: false)
            context!.restoreGState()
        }
    }

    public class func drawBird(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 85), golden: Bool = false, colorInput: CGFloat = 0, bird_wing_down: Bool = false, bird_wing_up: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let darkGold = StyleKitName.gold.colorWithShadow(shadow: 0.4)
        let yellow = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let darkYellow = yellow.colorWithShadow(shadow: 0.4)
        let red = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let darkRed = red.colorWithShadow(shadow: 0.4)
        let blue = UIColor(red: 0.000, green: 0.000, blue: 1.000, alpha: 1.000)
        let darkBlue = blue.colorWithShadow(shadow: 0.4)
        let green = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let darkGreen = green.colorWithShadow(shadow: 0.4)
        let orange = UIColor(red: 0.973, green: 0.675, blue: 0.227, alpha: 1.000)
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)
        let birdBodyShadow = NSShadow(color: UIColor.black.withAlphaComponent(0.6), offset: CGSize(width: -3.1, height: -7.1), blurRadius: 5)

        //// Variable Declarations
        let color = golden ? StyleKitName.gold : (colorInput == 0 ? red : (colorInput == 1 ? green : (colorInput == 2 ? blue : (colorInput == 3 ? yellow : black))))
        let birdBottomColor = golden ? darkGold : (colorInput == 0 ? darkRed : (colorInput == 1 ? darkGreen : (colorInput == 2 ? darkBlue : (colorInput == 3 ? darkYellow : darkRed))))
        let bird_anim_handler = bird_wing_down == false && bird_wing_up == false

        //// Body Drawing
        let bodyPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.09000 + 0.5), y: frame.minY + floor(frame.height * 0.09412 + 0.5), width: floor(frame.width * 0.86000 + 0.5) - floor(frame.width * 0.09000 + 0.5), height: floor(frame.height * 0.89412 + 0.5) - floor(frame.height * 0.09412 + 0.5)))
        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        color.setFill()
        bodyPath.fill()

        ////// Body Inner Shadow
        context!.saveGState()
        context!.clip(to: bodyPath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let bodyOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: bodyOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        bodyOpaqueShadow.setFill()
        bodyPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.restoreGState()

        UIColor.black.setStroke()
        bodyPath.lineWidth = 1
        bodyPath.stroke()


        //// Body_Bottom Drawing
        let body_BottomPath = UIBezierPath()
        body_BottomPath.move(to: CGPoint(x: frame.minX + 0.82000 * frame.width, y: frame.minY + 0.67059 * frame.height))
        body_BottomPath.addLine(to: CGPoint(x: frame.minX + 0.13000 * frame.width, y: frame.minY + 0.67059 * frame.height))
        body_BottomPath.addCurve(to: CGPoint(x: frame.minX + 0.45000 * frame.width, y: frame.minY + 0.89114 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.13000 * frame.width, y: frame.minY + 0.67059 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.18000 * frame.width, y: frame.minY + 0.85806 * frame.height))
        body_BottomPath.addCurve(to: CGPoint(x: frame.minX + 0.82000 * frame.width, y: frame.minY + 0.67059 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.72000 * frame.width, y: frame.minY + 0.92422 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.82000 * frame.width, y: frame.minY + 0.67059 * frame.height))
        body_BottomPath.addLine(to: CGPoint(x: frame.minX + 0.82000 * frame.width, y: frame.minY + 0.67059 * frame.height))
        body_BottomPath.close()
        birdBottomColor.setFill()
        body_BottomPath.fill()

        ////// Body_Bottom Inner Shadow
        context!.saveGState()
        context!.clip(to: body_BottomPath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((birdBodyShadow.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let body_BottomOpaqueShadow = (birdBodyShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: birdBodyShadow.shadowOffset, blur: birdBodyShadow.shadowBlurRadius, color: body_BottomOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        body_BottomOpaqueShadow.setFill()
        body_BottomPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        UIColor.black.setStroke()
        body_BottomPath.lineWidth = 0.5
        body_BottomPath.stroke()


        //// eye_white Drawing
        let eye_whitePath = UIBezierPath()
        eye_whitePath.move(to: CGPoint(x: frame.minX + 0.75500 * frame.width, y: frame.minY + 0.21765 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.84500 * frame.width, y: frame.minY + 0.35882 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.75500 * frame.width, y: frame.minY + 0.21765 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.82500 * frame.width, y: frame.minY + 0.28824 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.86500 * frame.width, y: frame.minY + 0.45294 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.86500 * frame.width, y: frame.minY + 0.42941 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.86500 * frame.width, y: frame.minY + 0.45294 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.85500 * frame.width, y: frame.minY + 0.52353 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.86500 * frame.width, y: frame.minY + 0.45294 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.86500 * frame.width, y: frame.minY + 0.51176 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.81500 * frame.width, y: frame.minY + 0.54706 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.84500 * frame.width, y: frame.minY + 0.53529 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.83500 * frame.width, y: frame.minY + 0.54706 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.56500 * frame.width, y: frame.minY + 0.53529 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.79500 * frame.width, y: frame.minY + 0.54706 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.56500 * frame.width, y: frame.minY + 0.53529 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.52500 * frame.width, y: frame.minY + 0.50000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.56500 * frame.width, y: frame.minY + 0.53529 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.53500 * frame.width, y: frame.minY + 0.53529 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.52500 * frame.width, y: frame.minY + 0.37059 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.51500 * frame.width, y: frame.minY + 0.46471 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.50500 * frame.width, y: frame.minY + 0.40588 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.64500 * frame.width, y: frame.minY + 0.22941 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.54500 * frame.width, y: frame.minY + 0.33529 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.59500 * frame.width, y: frame.minY + 0.24118 * frame.height))
        eye_whitePath.addCurve(to: CGPoint(x: frame.minX + 0.75500 * frame.width, y: frame.minY + 0.21765 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.69500 * frame.width, y: frame.minY + 0.21765 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.75500 * frame.width, y: frame.minY + 0.21765 * frame.height))
        eye_whitePath.close()
        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        eye_whitePath.fill()

        ////// eye_white Inner Shadow
        context!.saveGState()
        context!.clip(to: eye_whitePath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let eye_whiteOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: eye_whiteOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        eye_whiteOpaqueShadow.setFill()
        eye_whitePath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.restoreGState()

        UIColor.black.setStroke()
        eye_whitePath.lineWidth = 1
        eye_whitePath.stroke()


        //// eye_iris Drawing
        let eye_irisPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.72000 + 0.5), y: frame.minY + floor(frame.height * 0.34118 + 0.5), width: floor(frame.width * 0.84000 + 0.5) - floor(frame.width * 0.72000 + 0.5), height: floor(frame.height * 0.44706 + 0.5) - floor(frame.height * 0.34118 + 0.5)))
        UIColor.black.setFill()
        eye_irisPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frame.minX + 0.86740 * frame.width, y: frame.minY + 0.55036 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.91996 * frame.width, y: frame.minY + 0.55610 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.88635 * frame.width, y: frame.minY + 0.55181 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.90413 * frame.width, y: frame.minY + 0.55372 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.91996 * frame.width, y: frame.minY + 0.59978 * frame.height), controlPoint1: CGPoint(x: frame.minX + 1.00001 * frame.width, y: frame.minY + 0.56816 * frame.height), controlPoint2: CGPoint(x: frame.minX + 1.00001 * frame.width, y: frame.minY + 0.58772 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.69991 * frame.width, y: frame.minY + 0.60669 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.86047 * frame.width, y: frame.minY + 0.60874 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.77352 * frame.width, y: frame.minY + 0.61104 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.69992 * frame.width, y: frame.minY + 0.61096 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.70003 * frame.width, y: frame.minY + 0.60811 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.70003 * frame.width, y: frame.minY + 0.60954 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.87184 * frame.width, y: frame.minY + 0.61248 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.75546 * frame.width, y: frame.minY + 0.60767 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.81862 * frame.width, y: frame.minY + 0.60818 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.91996 * frame.width, y: frame.minY + 0.61787 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.88913 * frame.width, y: frame.minY + 0.61387 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.90537 * frame.width, y: frame.minY + 0.61567 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.91996 * frame.width, y: frame.minY + 0.66154 * frame.height), controlPoint1: CGPoint(x: frame.minX + 1.00001 * frame.width, y: frame.minY + 0.62993 * frame.height), controlPoint2: CGPoint(x: frame.minX + 1.00001 * frame.width, y: frame.minY + 0.64948 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.63004 * frame.width, y: frame.minY + 0.66154 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.83990 * frame.width, y: frame.minY + 0.67360 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.71010 * frame.width, y: frame.minY + 0.67360 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.57795 * frame.width, y: frame.minY + 0.64824 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.60458 * frame.width, y: frame.minY + 0.65771 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.58722 * frame.width, y: frame.minY + 0.65311 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.56343 * frame.width, y: frame.minY + 0.64158 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.57279 * frame.width, y: frame.minY + 0.64639 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.56791 * frame.width, y: frame.minY + 0.64417 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.54000 * frame.width, y: frame.minY + 0.60882 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.54781 * frame.width, y: frame.minY + 0.63253 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.54000 * frame.width, y: frame.minY + 0.62068 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.56343 * frame.width, y: frame.minY + 0.57607 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.54000 * frame.width, y: frame.minY + 0.59697 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.54781 * frame.width, y: frame.minY + 0.58511 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.57795 * frame.width, y: frame.minY + 0.56940 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.56791 * frame.width, y: frame.minY + 0.57347 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.57279 * frame.width, y: frame.minY + 0.57125 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.63004 * frame.width, y: frame.minY + 0.55610 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.58721 * frame.width, y: frame.minY + 0.56453 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.60458 * frame.width, y: frame.minY + 0.55994 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.86740 * frame.width, y: frame.minY + 0.55036 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.69427 * frame.width, y: frame.minY + 0.54643 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79051 * frame.width, y: frame.minY + 0.54452 * frame.height))
        bezier2Path.close()
        orange.setFill()
        bezier2Path.fill()

        ////// Bezier 2 Inner Shadow
        context!.saveGState()
        context!.clip(to: bezier2Path.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier2OpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: bezier2OpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier2OpaqueShadow.setFill()
        bezier2Path.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        if (bird_anim_handler) {
            //// Wing_mid Drawing
            let wing_midPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.09500) + 0.5, y: frame.minY + floor(frame.height * 0.54706) + 0.5, width: floor(frame.width * 0.47500) - floor(frame.width * 0.09500), height: floor(frame.height * 0.66471) - floor(frame.height * 0.54706)))
            white.setFill()
            wing_midPath.fill()

            ////// Wing_mid Inner Shadow
            context!.saveGState()
            context!.clip(to: wing_midPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let wing_midOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: wing_midOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            wing_midOpaqueShadow.setFill()
            wing_midPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            UIColor.black.setStroke()
            wing_midPath.lineWidth = 1
            wing_midPath.stroke()
        }


        if (bird_wing_down) {
            //// Wing_down Drawing
            let wing_downPath = UIBezierPath()
            wing_downPath.move(to: CGPoint(x: frame.minX + 0.17000 * frame.width, y: frame.minY + 0.41176 * frame.height))
            wing_downPath.addCurve(to: CGPoint(x: frame.minX + 0.35000 * frame.width, y: frame.minY + 0.49412 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.17000 * frame.width, y: frame.minY + 0.41176 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.24000 * frame.width, y: frame.minY + 0.37647 * frame.height))
            wing_downPath.addCurve(to: CGPoint(x: frame.minX + 0.26000 * frame.width, y: frame.minY + 0.81176 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.46000 * frame.width, y: frame.minY + 0.61176 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.35000 * frame.width, y: frame.minY + 0.77647 * frame.height))
            wing_downPath.addCurve(to: CGPoint(x: frame.minX + 0.02000 * frame.width, y: frame.minY + 0.81176 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.17000 * frame.width, y: frame.minY + 0.84706 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.06000 * frame.width, y: frame.minY + 0.88235 * frame.height))
            wing_downPath.addCurve(to: CGPoint(x: frame.minX + 0.10000 * frame.width, y: frame.minY + 0.49412 * frame.height), controlPoint1: CGPoint(x: frame.minX + -0.02000 * frame.width, y: frame.minY + 0.74118 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.05000 * frame.width, y: frame.minY + 0.57647 * frame.height))
            wing_downPath.addCurve(to: CGPoint(x: frame.minX + 0.17000 * frame.width, y: frame.minY + 0.41176 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.15000 * frame.width, y: frame.minY + 0.41176 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.17000 * frame.width, y: frame.minY + 0.41176 * frame.height))
            wing_downPath.close()
            UIColor.white.setFill()
            wing_downPath.fill()

            ////// Wing_down Inner Shadow
            context!.saveGState()
            context!.clip(to: wing_downPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((birdBodyShadow.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let wing_downOpaqueShadow = (birdBodyShadow.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: birdBodyShadow.shadowOffset, blur: birdBodyShadow.shadowBlurRadius, color: wing_downOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            wing_downOpaqueShadow.setFill()
            wing_downPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            UIColor.black.setStroke()
            wing_downPath.lineWidth = 1
            wing_downPath.stroke()
        }


        if (bird_wing_up) {
            //// Wing_up Drawing
            let wing_upPath = UIBezierPath()
            wing_upPath.move(to: CGPoint(x: frame.minX + 0.39535 * frame.width, y: frame.minY + 0.54963 * frame.height))
            wing_upPath.addCurve(to: CGPoint(x: frame.minX + 0.31590 * frame.width, y: frame.minY + 0.75673 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39535 * frame.width, y: frame.minY + 0.54963 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.42160 * frame.width, y: frame.minY + 0.63374 * frame.height))
            wing_upPath.addCurve(to: CGPoint(x: frame.minX + 0.05106 * frame.width, y: frame.minY + 0.63415 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.21021 * frame.width, y: frame.minY + 0.87972 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.07624 * frame.width, y: frame.minY + 0.74175 * frame.height))
            wing_upPath.addCurve(to: CGPoint(x: frame.minX + 0.06378 * frame.width, y: frame.minY + 0.35219 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.02587 * frame.width, y: frame.minY + 0.52654 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.00175 * frame.width, y: frame.minY + 0.39544 * frame.height))
            wing_upPath.addCurve(to: CGPoint(x: frame.minX + 0.32916 * frame.width, y: frame.minY + 0.46302 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.12582 * frame.width, y: frame.minY + 0.30894 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.26191 * frame.width, y: frame.minY + 0.39991 * frame.height))
            wing_upPath.addCurve(to: CGPoint(x: frame.minX + 0.39535 * frame.width, y: frame.minY + 0.54963 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39641 * frame.width, y: frame.minY + 0.52613 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.39535 * frame.width, y: frame.minY + 0.54963 * frame.height))
            wing_upPath.close()
            UIColor.white.setFill()
            wing_upPath.fill()

            ////// Wing_up Inner Shadow
            context!.saveGState()
            context!.clip(to: wing_upPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((birdBodyShadow.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let wing_upOpaqueShadow = (birdBodyShadow.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: birdBodyShadow.shadowOffset, blur: birdBodyShadow.shadowBlurRadius, color: wing_upOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            wing_upOpaqueShadow.setFill()
            wing_upPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            UIColor.black.setStroke()
            wing_upPath.lineWidth = 1
            wing_upPath.stroke()
        }
    }

    public class func drawBottom(frame: CGRect = CGRect(x: 0, y: 0, width: 640, height: 175), isWinter: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let winterExpr = isWinter ? white : StyleKitName.grass

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.14286 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.14286 + 0.5)))
        StyleKitName.sand.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 0.20571 + 0.5) - floor(frame.height * 0.00000 + 0.5)), byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.topRight], cornerRadii: CGSize(width: 10, height: 10))
        rectangle2Path.close()
        context!.saveGState()
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
        winterExpr.setFill()
        rectangle2Path.fill()
        context!.restoreGState()
    }

    public class func drawCloud(frame: CGRect = CGRect(x: 0, y: 0, width: 256, height: 128), textInput: String = "Hello, World!", textSize: CGFloat = 12) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.61325 * frame.width, y: frame.minY + 0.11457 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.64817 * frame.width, y: frame.minY + 0.19885 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.62871 * frame.width, y: frame.minY + 0.13947 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.64036 * frame.width, y: frame.minY + 0.16820 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.79218 * frame.width, y: frame.minY + 0.21326 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.69106 * frame.width, y: frame.minY + 0.14808 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.75287 * frame.width, y: frame.minY + 0.15288 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.82035 * frame.width, y: frame.minY + 0.28763 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.80612 * frame.width, y: frame.minY + 0.23466 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.81550 * frame.width, y: frame.minY + 0.26039 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.83752 * frame.width, y: frame.minY + 0.26698 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.82570 * frame.width, y: frame.minY + 0.27939 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.83147 * frame.width, y: frame.minY + 0.27251 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.93910 * frame.width, y: frame.minY + 0.29691 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.87045 * frame.width, y: frame.minY + 0.23685 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.91161 * frame.width, y: frame.minY + 0.24682 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.93910 * frame.width, y: frame.minY + 0.52340 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.97342 * frame.width, y: frame.minY + 0.35945 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.97342 * frame.width, y: frame.minY + 0.46086 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.93417 * frame.width, y: frame.minY + 0.53174 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.93750 * frame.width, y: frame.minY + 0.52632 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.93586 * frame.width, y: frame.minY + 0.52909 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.93644 * frame.width, y: frame.minY + 0.53547 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.93494 * frame.width, y: frame.minY + 0.53294 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.93569 * frame.width, y: frame.minY + 0.53419 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.93644 * frame.width, y: frame.minY + 0.70672 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.96390 * frame.width, y: frame.minY + 0.58276 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.96390 * frame.width, y: frame.minY + 0.65943 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.88192 * frame.width, y: frame.minY + 0.74191 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.92149 * frame.width, y: frame.minY + 0.73247 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.90148 * frame.width, y: frame.minY + 0.74420 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.86222 * frame.width, y: frame.minY + 0.80828 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.87966 * frame.width, y: frame.minY + 0.76621 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.87310 * frame.width, y: frame.minY + 0.78955 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.76833 * frame.width, y: frame.minY + 0.81689 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.83654 * frame.width, y: frame.minY + 0.85250 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79594 * frame.width, y: frame.minY + 0.85537 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.76456 * frame.width, y: frame.minY + 0.82391 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.76714 * frame.width, y: frame.minY + 0.81929 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.76588 * frame.width, y: frame.minY + 0.82163 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.67881 * frame.width, y: frame.minY + 0.84229 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.74130 * frame.width, y: frame.minY + 0.86396 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.70581 * frame.width, y: frame.minY + 0.87009 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.66300 * frame.width, y: frame.minY + 0.88526 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.67538 * frame.width, y: frame.minY + 0.85795 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.67011 * frame.width, y: frame.minY + 0.87262 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.56479 * frame.width, y: frame.minY + 0.88739 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.63595 * frame.width, y: frame.minY + 0.93336 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.59233 * frame.width, y: frame.minY + 0.93407 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.55753 * frame.width, y: frame.minY + 0.90203 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.56263 * frame.width, y: frame.minY + 0.89252 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.56021 * frame.width, y: frame.minY + 0.89741 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.45809 * frame.width, y: frame.minY + 0.90203 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.53007 * frame.width, y: frame.minY + 0.94932 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.48555 * frame.width, y: frame.minY + 0.94932 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.44971 * frame.width, y: frame.minY + 0.88463 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.45493 * frame.width, y: frame.minY + 0.89659 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.45214 * frame.width, y: frame.minY + 0.89076 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.36044 * frame.width, y: frame.minY + 0.86964 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.42234 * frame.width, y: frame.minY + 0.91780 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.38472 * frame.width, y: frame.minY + 0.91280 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.35056 * frame.width, y: frame.minY + 0.84763 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.35661 * frame.width, y: frame.minY + 0.86284 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.35332 * frame.width, y: frame.minY + 0.85545 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.27059 * frame.width, y: frame.minY + 0.82391 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.32444 * frame.width, y: frame.minY + 0.86907 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.29222 * frame.width, y: frame.minY + 0.86116 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.25983 * frame.width, y: frame.minY + 0.80010 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.26635 * frame.width, y: frame.minY + 0.81660 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.26276 * frame.width, y: frame.minY + 0.80859 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.16513 * frame.width, y: frame.minY + 0.79266 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.23221 * frame.width, y: frame.minY + 0.83980 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.19106 * frame.width, y: frame.minY + 0.83732 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.14892 * frame.width, y: frame.minY + 0.74921 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.15773 * frame.width, y: frame.minY + 0.77992 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.15233 * frame.width, y: frame.minY + 0.76506 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.09091 * frame.width, y: frame.minY + 0.71682 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.12827 * frame.width, y: frame.minY + 0.75314 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.10675 * frame.width, y: frame.minY + 0.74234 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.09091 * frame.width, y: frame.minY + 0.55662 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.06345 * frame.width, y: frame.minY + 0.67258 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.06345 * frame.width, y: frame.minY + 0.60086 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.09556 * frame.width, y: frame.minY + 0.54976 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.09241 * frame.width, y: frame.minY + 0.55420 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.09396 * frame.width, y: frame.minY + 0.55191 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.07652 * frame.width, y: frame.minY + 0.52340 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.08874 * frame.width, y: frame.minY + 0.54276 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.08233 * frame.width, y: frame.minY + 0.53398 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.07652 * frame.width, y: frame.minY + 0.29691 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.04220 * frame.width, y: frame.minY + 0.46086 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.04220 * frame.width, y: frame.minY + 0.35945 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.19831 * frame.width, y: frame.minY + 0.29252 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.11002 * frame.width, y: frame.minY + 0.23586 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.16384 * frame.width, y: frame.minY + 0.23440 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.21004 * frame.width, y: frame.minY + 0.24705 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20074 * frame.width, y: frame.minY + 0.27674 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.20465 * frame.width, y: frame.minY + 0.26140 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.22678 * frame.width, y: frame.minY + 0.21326 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.21458 * frame.width, y: frame.minY + 0.23499 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.22015 * frame.width, y: frame.minY + 0.22362 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.35547 * frame.width, y: frame.minY + 0.18565 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.26164 * frame.width, y: frame.minY + 0.15874 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.31452 * frame.width, y: frame.minY + 0.14953 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.38675 * frame.width, y: frame.minY + 0.11457 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.36310 * frame.width, y: frame.minY + 0.15995 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.37353 * frame.width, y: frame.minY + 0.13586 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.41332 * frame.width, y: frame.minY + 0.08002 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39499 * frame.width, y: frame.minY + 0.10131 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.40391 * frame.width, y: frame.minY + 0.08979 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.61325 * frame.width, y: frame.minY + 0.11457 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.47534 * frame.width, y: frame.minY + 0.01564 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.55894 * frame.width, y: frame.minY + 0.02716 * frame.height))
        bezierPath.close()
        bezierPath.lineJoinStyle = .bevel;

        context!.saveGState()
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
        white.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        context!.saveGState()
        context!.clip(to: bezierPath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezierOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: bezierOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.restoreGState()

        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: frame.minX + floor(frame.width * 0.05078 + 0.5), y: frame.minY + floor(frame.height * 0.19531 + 0.5), width: floor(frame.width * 0.96484 + 0.5) - floor(frame.width * 0.05078 + 0.5), height: floor(frame.height * 0.78125 + 0.5) - floor(frame.height * 0.19531 + 0.5))
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center

        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: textSize)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: textInput).boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        context!.saveGState()
        context!.clip(to: textRect)
        NSString(string: textInput).draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context!.restoreGState()
    }

    public class func drawPauseButton(frame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 65), toggleVisibility: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Variable Declarations
        let visibilityExpr = toggleVisibility ? false : true

        if (visibilityExpr) {
            //// Pause Drawing
            let pausePath = UIBezierPath()
            pausePath.move(to: CGPoint(x: frame.minX + 0.14000 * frame.width, y: frame.minY + 0.92308 * frame.height))
            pausePath.addLine(to: CGPoint(x: frame.minX + 0.40000 * frame.width, y: frame.minY + 0.92308 * frame.height))
            pausePath.addLine(to: CGPoint(x: frame.minX + 0.40000 * frame.width, y: frame.minY + 0.07692 * frame.height))
            pausePath.addLine(to: CGPoint(x: frame.minX + 0.14000 * frame.width, y: frame.minY + 0.07692 * frame.height))
            pausePath.addLine(to: CGPoint(x: frame.minX + 0.14000 * frame.width, y: frame.minY + 0.92308 * frame.height))
            pausePath.close()
            pausePath.move(to: CGPoint(x: frame.minX + 0.60000 * frame.width, y: frame.minY + 0.92308 * frame.height))
            pausePath.addLine(to: CGPoint(x: frame.minX + 0.86000 * frame.width, y: frame.minY + 0.92308 * frame.height))
            pausePath.addLine(to: CGPoint(x: frame.minX + 0.86000 * frame.width, y: frame.minY + 0.07692 * frame.height))
            pausePath.addLine(to: CGPoint(x: frame.minX + 0.60000 * frame.width, y: frame.minY + 0.07692 * frame.height))
            pausePath.addLine(to: CGPoint(x: frame.minX + 0.60000 * frame.width, y: frame.minY + 0.92308 * frame.height))
            pausePath.close()
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            pausePath.fill()

            ////// Pause Inner Shadow
            context!.saveGState()
            context!.clip(to: pausePath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let pauseOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: pauseOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            pauseOpaqueShadow.setFill()
            pausePath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            pausePath.lineWidth = 1
            pausePath.stroke()
        }


        if (toggleVisibility) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: frame.minX + 0.17000 * frame.width, y: frame.minY + 0.05385 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.17000 * frame.width, y: frame.minY + 0.94615 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.93000 * frame.width, y: frame.minY + 0.50000 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.17000 * frame.width, y: frame.minY + 0.05385 * frame.height))
            bezierPath.close()
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            bezierPath.fill()

            ////// Bezier Inner Shadow
            context!.saveGState()
            context!.clip(to: bezierPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let bezierOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: bezierOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            bezierOpaqueShadow.setFill()
            bezierPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()
        }
    }

    public class func drawGun(frame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 20)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.91335 * frame.width, y: frame.minY + 0.25014 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.98262 * frame.width, y: frame.minY + 1.00000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.91333 * frame.width, y: frame.minY + 0.25000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.98262 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.84408 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.01741 * frame.width, y: frame.minY + 1.00000 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.08667 * frame.width, y: frame.minY + 0.25000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.01738 * frame.width, y: frame.minY + 1.00000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.08667 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.91333 * frame.width, y: frame.minY + 0.25000 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.91335 * frame.width, y: frame.minY + 0.25014 * frame.height))
        bezierPath.close()
        StyleKitName.wood.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        context!.saveGState()
        context!.clip(to: bezierPath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezierOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: bezierOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public class func drawBall(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), golden: Bool = false, colorInput: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let yellow = UIColor(red: 1.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let red = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let blue = UIColor(red: 0.000, green: 0.000, blue: 1.000, alpha: 1.000)
        let green = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_Ball = NSShadow(color: UIColor.black.withAlphaComponent(0.53), offset: CGSize(width: -10.1, height: -10.1), blurRadius: 5)
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Variable Declarations
        let color = golden ? StyleKitName.gold : (colorInput == 0 ? red : (colorInput == 1 ? green : (colorInput == 2 ? blue : (colorInput == 3 ? yellow : black))))

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 3, y: frame.minY + 3, width: floor((frame.width - 3) * 0.97938 + 0.5), height: floor((frame.height - 3) * 0.95876 + 0.5)))
        color.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        context!.saveGState()
        context!.clip(to: ovalPath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_Ball.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let ovalOpaqueShadow = (shadow_Ball.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_Ball.shadowOffset, blur: shadow_Ball.shadowBlurRadius, color: ovalOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()
        context!.restoreGState()
    }

    public class func drawMenuIcon(frame: CGRect = CGRect(x: 0, y: 0, width: 125, height: 125), toggleVisibility: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Variable Declarations
        let visibilityExpr = toggleVisibility ? false : true

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.02400 + 0.5), y: frame.minY + floor(frame.height * 0.01600 + 0.5), width: floor(frame.width * 0.98400 + 0.5) - floor(frame.width * 0.02400 + 0.5), height: floor(frame.height * 0.97600 + 0.5) - floor(frame.height * 0.01600 + 0.5)))
        white.setFill()
        ovalPath.fill()
        UIColor.black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.09200) + 0.5, y: frame.minY + floor(frame.height * 0.09200) + 0.5, width: floor(frame.width * 0.90800) - floor(frame.width * 0.09200), height: floor(frame.height * 0.90800) - floor(frame.height * 0.09200)))
        StyleKitName.sky.setFill()
        oval2Path.fill()

        ////// Oval 2 Inner Shadow
        context!.saveGState()
        context!.clip(to: oval2Path.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let oval2OpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: oval2OpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        oval2OpaqueShadow.setFill()
        oval2Path.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.saveGState()
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()
        context!.restoreGState()


        if (toggleVisibility) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: frame.minX + 0.53504 * frame.width, y: frame.minY + 0.15860 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.54777 * frame.width, y: frame.minY + 0.21481 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.53504 * frame.width, y: frame.minY + 0.15860 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.54282 * frame.width, y: frame.minY + 0.19298 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.62194 * frame.width, y: frame.minY + 0.23616 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.57382 * frame.width, y: frame.minY + 0.21851 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.59872 * frame.width, y: frame.minY + 0.22580 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.66362 * frame.width, y: frame.minY + 0.19109 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.63683 * frame.width, y: frame.minY + 0.22007 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.66362 * frame.width, y: frame.minY + 0.19109 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.71045 * frame.width, y: frame.minY + 0.21812 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.69118 * frame.width, y: frame.minY + 0.28023 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.71045 * frame.width, y: frame.minY + 0.21812 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.69736 * frame.width, y: frame.minY + 0.26034 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.72828 * frame.width, y: frame.minY + 0.31913 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.70475 * frame.width, y: frame.minY + 0.29198 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.71718 * frame.width, y: frame.minY + 0.30500 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.79672 * frame.width, y: frame.minY + 0.29789 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.74318 * frame.width, y: frame.minY + 0.31450 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79672 * frame.width, y: frame.minY + 0.29789 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.82376 * frame.width, y: frame.minY + 0.34472 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.77039 * frame.width, y: frame.minY + 0.39407 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.82376 * frame.width, y: frame.minY + 0.34472 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.78067 * frame.width, y: frame.minY + 0.38456 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.78520 * frame.width, y: frame.minY + 0.45223 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.77732 * frame.width, y: frame.minY + 0.41261 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.78233 * frame.width, y: frame.minY + 0.43207 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.84140 * frame.width, y: frame.minY + 0.46496 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.80702 * frame.width, y: frame.minY + 0.45718 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.84140 * frame.width, y: frame.minY + 0.46496 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.84140 * frame.width, y: frame.minY + 0.51904 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.78520 * frame.width, y: frame.minY + 0.53176 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.84140 * frame.width, y: frame.minY + 0.51904 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.80702 * frame.width, y: frame.minY + 0.52682 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.76807 * frame.width, y: frame.minY + 0.59595 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.78202 * frame.width, y: frame.minY + 0.55412 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.77620 * frame.width, y: frame.minY + 0.57562 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.82376 * frame.width, y: frame.minY + 0.64728 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.76821 * frame.width, y: frame.minY + 0.59592 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.82376 * frame.width, y: frame.minY + 0.64728 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.79672 * frame.width, y: frame.minY + 0.69411 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.72446 * frame.width, y: frame.minY + 0.67169 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.72402 * frame.width, y: frame.minY + 0.67015 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.72446 * frame.width, y: frame.minY + 0.67169 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.72430 * frame.width, y: frame.minY + 0.67114 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.68237 * frame.width, y: frame.minY + 0.71109 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.71160 * frame.width, y: frame.minY + 0.68520 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.69763 * frame.width, y: frame.minY + 0.69893 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.70174 * frame.width, y: frame.minY + 0.77353 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.68849 * frame.width, y: frame.minY + 0.73085 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.70174 * frame.width, y: frame.minY + 0.77353 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.65491 * frame.width, y: frame.minY + 0.80057 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.61056 * frame.width, y: frame.minY + 0.75262 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.65491 * frame.width, y: frame.minY + 0.80057 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.62463 * frame.width, y: frame.minY + 0.76782 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.54325 * frame.width, y: frame.minY + 0.76980 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.58928 * frame.width, y: frame.minY + 0.76100 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.56672 * frame.width, y: frame.minY + 0.76685 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.52704 * frame.width, y: frame.minY + 0.84140 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.54048 * frame.width, y: frame.minY + 0.78205 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.52704 * frame.width, y: frame.minY + 0.84140 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.47296 * frame.width, y: frame.minY + 0.84140 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.45625 * frame.width, y: frame.minY + 0.76760 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.40771 * frame.width, y: frame.minY + 0.75379 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.43950 * frame.width, y: frame.minY + 0.76445 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.42327 * frame.width, y: frame.minY + 0.75979 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.36544 * frame.width, y: frame.minY + 0.79950 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39295 * frame.width, y: frame.minY + 0.76974 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.36544 * frame.width, y: frame.minY + 0.79950 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.31861 * frame.width, y: frame.minY + 0.77246 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.33682 * frame.width, y: frame.minY + 0.71376 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.31861 * frame.width, y: frame.minY + 0.77246 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.33033 * frame.width, y: frame.minY + 0.73468 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.29450 * frame.width, y: frame.minY + 0.67325 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.32135 * frame.width, y: frame.minY + 0.70176 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.30716 * frame.width, y: frame.minY + 0.68818 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.22728 * frame.width, y: frame.minY + 0.69411 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.27810 * frame.width, y: frame.minY + 0.67834 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.22728 * frame.width, y: frame.minY + 0.69411 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.20024 * frame.width, y: frame.minY + 0.64728 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.25008 * frame.width, y: frame.minY + 0.60119 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20024 * frame.width, y: frame.minY + 0.64728 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.23591 * frame.width, y: frame.minY + 0.61430 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.23080 * frame.width, y: frame.minY + 0.53176 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.24082 * frame.width, y: frame.minY + 0.57933 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.23425 * frame.width, y: frame.minY + 0.55605 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.17460 * frame.width, y: frame.minY + 0.51904 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20898 * frame.width, y: frame.minY + 0.52682 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.17460 * frame.width, y: frame.minY + 0.51904 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.17460 * frame.width, y: frame.minY + 0.46496 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.23080 * frame.width, y: frame.minY + 0.45223 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.17460 * frame.width, y: frame.minY + 0.46496 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.20898 * frame.width, y: frame.minY + 0.45718 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.24771 * frame.width, y: frame.minY + 0.38861 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.23395 * frame.width, y: frame.minY + 0.43009 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.23969 * frame.width, y: frame.minY + 0.40877 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.20024 * frame.width, y: frame.minY + 0.34472 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.23230 * frame.width, y: frame.minY + 0.37437 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.20024 * frame.width, y: frame.minY + 0.34472 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.22728 * frame.width, y: frame.minY + 0.29789 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.28931 * frame.width, y: frame.minY + 0.31714 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.22728 * frame.width, y: frame.minY + 0.29789 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.26937 * frame.width, y: frame.minY + 0.31095 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.33313 * frame.width, y: frame.minY + 0.27330 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.30225 * frame.width, y: frame.minY + 0.30096 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.31696 * frame.width, y: frame.minY + 0.28625 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.31389 * frame.width, y: frame.minY + 0.21128 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.32695 * frame.width, y: frame.minY + 0.25338 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.31389 * frame.width, y: frame.minY + 0.21128 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.34736 * frame.width, y: frame.minY + 0.19195 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.31389 * frame.width, y: frame.minY + 0.21128 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.33352 * frame.width, y: frame.minY + 0.19994 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.36072 * frame.width, y: frame.minY + 0.18424 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.35490 * frame.width, y: frame.minY + 0.18760 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.36072 * frame.width, y: frame.minY + 0.18424 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.38927 * frame.width, y: frame.minY + 0.21511 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.36072 * frame.width, y: frame.minY + 0.18424 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.37554 * frame.width, y: frame.minY + 0.20027 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.40461 * frame.width, y: frame.minY + 0.23171 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39495 * frame.width, y: frame.minY + 0.22126 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.40044 * frame.width, y: frame.minY + 0.22720 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.46823 * frame.width, y: frame.minY + 0.21480 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.42477 * frame.width, y: frame.minY + 0.22369 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.44609 * frame.width, y: frame.minY + 0.21795 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.48096 * frame.width, y: frame.minY + 0.15860 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.47318 * frame.width, y: frame.minY + 0.19298 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.48096 * frame.width, y: frame.minY + 0.15860 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.53503 * frame.width, y: frame.minY + 0.15860 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.53504 * frame.width, y: frame.minY + 0.15860 * frame.height))
            bezierPath.close()
            context!.saveGState()
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
            white.setFill()
            bezierPath.fill()

            ////// Bezier Inner Shadow
            context!.saveGState()
            context!.clip(to: bezierPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let bezierOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: bezierOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            bezierOpaqueShadow.setFill()
            bezierPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()


            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.28400) + 0.5, y: frame.minY + floor(frame.height * 0.27600) + 0.5, width: floor(frame.width * 0.72400) - floor(frame.width * 0.28400), height: floor(frame.height * 0.71600) - floor(frame.height * 0.27600)))
            StyleKitName.sky.setFill()
            oval4Path.fill()

            ////// Oval 4 Inner Shadow
            context!.saveGState()
            context!.clip(to: oval4Path.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let oval4OpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: oval4OpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            oval4OpaqueShadow.setFill()
            oval4Path.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            UIColor.black.setStroke()
            oval4Path.lineWidth = 1
            oval4Path.stroke()
        }


        if (visibilityExpr) {
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + floor(frame.width * 0.46800) + 0.5, y: frame.minY + floor(frame.height * 0.40400) + 0.5, width: floor(frame.width * 0.53200) - floor(frame.width * 0.46800), height: floor(frame.height * 0.74000) - floor(frame.height * 0.40400)))
            white.setFill()
            rectanglePath.fill()
            context!.saveGState()
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
            UIColor.black.setStroke()
            rectanglePath.lineWidth = 1
            rectanglePath.stroke()
            context!.restoreGState()


            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.45200) + 0.5, y: frame.minY + floor(frame.height * 0.25200) + 0.5, width: floor(frame.width * 0.54800) - floor(frame.width * 0.45200), height: floor(frame.height * 0.34800) - floor(frame.height * 0.25200)))
            white.setFill()
            oval3Path.fill()
            context!.saveGState()
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
            UIColor.black.setStroke()
            oval3Path.lineWidth = 1
            oval3Path.stroke()
            context!.restoreGState()
        }
    }

    public class func drawEgg(frame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 70), golden: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Variable Declarations
        let goldenEgg = golden ? StyleKitName.gold : white

        //// EggBezier Drawing
        let eggBezierPath = UIBezierPath()
        eggBezierPath.move(to: CGPoint(x: frame.minX + 0.74335 * frame.width, y: frame.minY + 0.15129 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.81319 * frame.width, y: frame.minY + 0.25144 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.77384 * frame.width, y: frame.minY + 0.18099 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79712 * frame.width, y: frame.minY + 0.21507 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.84435 * frame.width, y: frame.minY + 0.29414 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.82422 * frame.width, y: frame.minY + 0.26354 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.83467 * frame.width, y: frame.minY + 0.27778 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.88650 * frame.width, y: frame.minY + 0.40222 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.86318 * frame.width, y: frame.minY + 0.32600 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.87723 * frame.width, y: frame.minY + 0.36287 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.83213 * frame.width, y: frame.minY + 0.77728 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.94500 * frame.width, y: frame.minY + 0.52325 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.92688 * frame.width, y: frame.minY + 0.67577 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.68760 * frame.width, y: frame.minY + 0.86321 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.79087 * frame.width, y: frame.minY + 0.82150 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.74057 * frame.width, y: frame.minY + 0.85014 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.64435 * frame.width, y: frame.minY + 0.88326 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.67836 * frame.width, y: frame.minY + 0.87051 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.66394 * frame.width, y: frame.minY + 0.87737 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.37565 * frame.width, y: frame.minY + 0.88326 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.57015 * frame.width, y: frame.minY + 0.90558 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.44985 * frame.width, y: frame.minY + 0.90558 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.33240 * frame.width, y: frame.minY + 0.86320 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.35606 * frame.width, y: frame.minY + 0.87737 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.34164 * frame.width, y: frame.minY + 0.87051 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.18787 * frame.width, y: frame.minY + 0.77728 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.27943 * frame.width, y: frame.minY + 0.85014 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.22913 * frame.width, y: frame.minY + 0.82150 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.13349 * frame.width, y: frame.minY + 0.40222 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.09312 * frame.width, y: frame.minY + 0.67577 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.07500 * frame.width, y: frame.minY + 0.52325 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.17565 * frame.width, y: frame.minY + 0.29414 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.14277 * frame.width, y: frame.minY + 0.36287 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.15682 * frame.width, y: frame.minY + 0.32600 * frame.height))
        eggBezierPath.addLine(to: CGPoint(x: frame.minX + 0.17648 * frame.width, y: frame.minY + 0.29275 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.20681 * frame.width, y: frame.minY + 0.25146 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.18592 * frame.width, y: frame.minY + 0.27697 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.19609 * frame.width, y: frame.minY + 0.26321 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.24070 * frame.width, y: frame.minY + 0.19271 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.21583 * frame.width, y: frame.minY + 0.23103 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.22712 * frame.width, y: frame.minY + 0.21133 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.27665 * frame.width, y: frame.minY + 0.15129 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.25129 * frame.width, y: frame.minY + 0.17818 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.26328 * frame.width, y: frame.minY + 0.16431 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.38305 * frame.width, y: frame.minY + 0.08179 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.30812 * frame.width, y: frame.minY + 0.12064 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.34437 * frame.width, y: frame.minY + 0.09747 * frame.height))
        eggBezierPath.addCurve(to: CGPoint(x: frame.minX + 0.74335 * frame.width, y: frame.minY + 0.15129 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.50279 * frame.width, y: frame.minY + 0.03325 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.64594 * frame.width, y: frame.minY + 0.05641 * frame.height))
        eggBezierPath.close()
        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        goldenEgg.setFill()
        eggBezierPath.fill()

        ////// EggBezier Inner Shadow
        context!.saveGState()
        context!.clip(to: eggBezierPath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let eggBezierOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: eggBezierOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        eggBezierOpaqueShadow.setFill()
        eggBezierPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.restoreGState()

        UIColor.black.setStroke()
        eggBezierPath.lineWidth = 1
        eggBezierPath.stroke()
    }

    public class func drawStoreIcon(frame: CGRect = CGRect(x: 0, y: 0, width: 128, height: 128), store_icon_id: String = "ID_Restore") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let red = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Variable Declarations
        let store_icon_premium = store_icon_id == "ID_Premium" ? true : false
        let store_icon_booster = store_icon_id == "ID_Booster" ? true : false
        let store_icon_ads = store_icon_id == "ID_Ads" ? true : false
        let store_icon_credits = store_icon_id == "ID_Credits" ? true : false
        let store_icon_enablebank = store_icon_id == "ID_EnableBank" ? true : false
        let store_icon_upgradebank = store_icon_id == "ID_UpgradeBank" ? true : false
        let store_icon_eggs = store_icon_id == "ID_Eggs" ? true : false
        let store_icon_lifes = store_icon_id == "ID_Lifes" ? true : false
        let store_icon_restore = store_icon_id == "ID_Restore" ? true : false

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5)), byRoundingCorners: UIRectCorner.topRight, cornerRadii: CGSize(width: 5, height: 5))
        rectanglePath.close()
        StyleKitName.grass.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context!.saveGState()
        context!.clip(to: rectanglePath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: rectangleOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()



        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: frame.minX + floor(frame.width * 0.03125 + 0.5), y: frame.minY + floor(frame.height * 0.03125 + 0.5), width: floor(frame.width * 0.96875 + 0.5) - floor(frame.width * 0.03125 + 0.5), height: floor(frame.height * 0.96875 + 0.5) - floor(frame.height * 0.03125 + 0.5)), byRoundingCorners: UIRectCorner.topRight, cornerRadii: CGSize(width: 5, height: 5))
        rectangle2Path.close()
        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        white.setFill()
        rectangle2Path.fill()
        context!.restoreGState()



        if (store_icon_enablebank) {
            //// Bank Drawing
            let bankPath = UIBezierPath()
            bankPath.move(to: CGPoint(x: frame.minX + 0.08203 * frame.width, y: frame.minY + 0.75391 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.91797 * frame.width, y: frame.minY + 0.75391 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.91797 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.08203 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.08203 * frame.width, y: frame.minY + 0.75391 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.14453 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.83984 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.83984 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.14453 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.14453 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.22266 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.31641 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.31641 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.22266 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.22266 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.44922 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.54297 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.54297 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.44922 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.44922 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.66016 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.75391 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.75391 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.66016 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.66016 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bankPath.close()
            bankPath.move(to: CGPoint(x: frame.minX + 0.49415 * frame.width, y: frame.minY + 0.25001 * frame.height))
            bankPath.addCurve(to: CGPoint(x: frame.minX + 0.82625 * frame.width, y: frame.minY + 0.39453 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.49414 * frame.width, y: frame.minY + 0.25000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.78637 * frame.width, y: frame.minY + 0.37718 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.83984 * frame.width, y: frame.minY + 0.39453 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.83984 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.14453 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.14453 * frame.width, y: frame.minY + 0.39453 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.16203 * frame.width, y: frame.minY + 0.39453 * frame.height))
            bankPath.addCurve(to: CGPoint(x: frame.minX + 0.49414 * frame.width, y: frame.minY + 0.25000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20191 * frame.width, y: frame.minY + 0.37718 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.49414 * frame.width, y: frame.minY + 0.25000 * frame.height))
            bankPath.addLine(to: CGPoint(x: frame.minX + 0.49415 * frame.width, y: frame.minY + 0.25001 * frame.height))
            bankPath.close()
            context!.saveGState()
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            bankPath.fill()

            ////// Bank Inner Shadow
            context!.saveGState()
            context!.clip(to: bankPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let bankOpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: bankOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            bankOpaqueShadow.setFill()
            bankPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            bankPath.lineWidth = 1
            bankPath.stroke()
        }


        if (store_icon_premium) {
            //// Symbol Drawing
            let symbolRect = CGRect(x: frame.minX + floor(frame.width * 0.10938 + 0.5), y: frame.minY + floor(frame.height * 0.16406 + 0.5), width: floor(frame.width * 0.89062 + 0.5) - floor(frame.width * 0.10938 + 0.5), height: floor(frame.height * 0.82812 + 0.5) - floor(frame.height * 0.16406 + 0.5))
            context!.saveGState()
            UIRectClip(symbolRect)
            context!.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

            StyleKitName.drawBird(frame: CGRect(x: 0, y: 0, width: symbolRect.size.width, height: symbolRect.size.height), golden: true, colorInput: 0, bird_wing_down: false, bird_wing_up: true)
            context!.restoreGState()
        }


        if (store_icon_lifes) {
            //// Symbol 2 Drawing
            let symbol2Rect = CGRect(x: frame.minX + floor(frame.width * 0.10938 + 0.5), y: frame.minY + floor(frame.height * 0.16406 + 0.5), width: floor(frame.width * 0.89062 + 0.5) - floor(frame.width * 0.10938 + 0.5), height: floor(frame.height * 0.82812 + 0.5) - floor(frame.height * 0.16406 + 0.5))
            context!.saveGState()
            UIRectClip(symbol2Rect)
            context!.translateBy(x: symbol2Rect.origin.x, y: symbol2Rect.origin.y)

            StyleKitName.drawBird(frame: CGRect(x: 0, y: 0, width: symbol2Rect.size.width, height: symbol2Rect.size.height), golden: false, colorInput: 0, bird_wing_down: false, bird_wing_up: true)
            context!.restoreGState()
        }


        if (store_icon_eggs) {
            //// Symbol 3 Drawing
            let symbol3Rect = CGRect(x: frame.minX + floor(frame.width * 0.24219 + 0.5), y: frame.minY + floor(frame.height * 0.14844 + 0.5), width: floor(frame.width * 0.76562 + 0.5) - floor(frame.width * 0.24219 + 0.5), height: floor(frame.height * 0.84375 + 0.5) - floor(frame.height * 0.14844 + 0.5))
            context!.saveGState()
            UIRectClip(symbol3Rect)
            context!.translateBy(x: symbol3Rect.origin.x, y: symbol3Rect.origin.y)

            StyleKitName.drawEgg(frame: CGRect(x: 0, y: 0, width: symbol3Rect.size.width, height: symbol3Rect.size.height), golden: false)
            context!.restoreGState()
        }


        if (store_icon_upgradebank) {
            //// Bank 2 Drawing
            let bank2Path = UIBezierPath()
            bank2Path.move(to: CGPoint(x: frame.minX + 0.08984 * frame.width, y: frame.minY + 0.75391 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.92578 * frame.width, y: frame.minY + 0.75391 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.92578 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.08984 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.08984 * frame.width, y: frame.minY + 0.75391 * frame.height))
            bank2Path.close()
            bank2Path.move(to: CGPoint(x: frame.minX + 0.15234 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.84766 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.84766 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.15234 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.15234 * frame.width, y: frame.minY + 0.71484 * frame.height))
            bank2Path.close()
            bank2Path.move(to: CGPoint(x: frame.minX + 0.23047 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.32422 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.32422 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.23047 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.23047 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.close()
            bank2Path.move(to: CGPoint(x: frame.minX + 0.45703 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.55078 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.55078 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.45703 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.45703 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.close()
            bank2Path.move(to: CGPoint(x: frame.minX + 0.66797 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.76172 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.76172 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.66797 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.66797 * frame.width, y: frame.minY + 0.67578 * frame.height))
            bank2Path.close()
            bank2Path.move(to: CGPoint(x: frame.minX + 0.50197 * frame.width, y: frame.minY + 0.25001 * frame.height))
            bank2Path.addCurve(to: CGPoint(x: frame.minX + 0.83406 * frame.width, y: frame.minY + 0.39453 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.50195 * frame.width, y: frame.minY + 0.25000 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79418 * frame.width, y: frame.minY + 0.37718 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.84766 * frame.width, y: frame.minY + 0.39453 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.84766 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.15234 * frame.width, y: frame.minY + 0.45703 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.15234 * frame.width, y: frame.minY + 0.39453 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.16984 * frame.width, y: frame.minY + 0.39453 * frame.height))
            bank2Path.addCurve(to: CGPoint(x: frame.minX + 0.50195 * frame.width, y: frame.minY + 0.25000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20972 * frame.width, y: frame.minY + 0.37718 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.50195 * frame.width, y: frame.minY + 0.25000 * frame.height))
            bank2Path.addLine(to: CGPoint(x: frame.minX + 0.50197 * frame.width, y: frame.minY + 0.25001 * frame.height))
            bank2Path.close()
            context!.saveGState()
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            bank2Path.fill()

            ////// Bank 2 Inner Shadow
            context!.saveGState()
            context!.clip(to: bank2Path.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let bank2OpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: bank2OpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            bank2OpaqueShadow.setFill()
            bank2Path.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            bank2Path.lineWidth = 1
            bank2Path.stroke()
        }


        if (store_icon_booster) {
            //// Booster Drawing
            let boosterRect = CGRect(x: frame.minX + floor(frame.width * 0.07812 + 0.5), y: frame.minY + floor(frame.height * 0.21875 + 0.5), width: floor(frame.width * 0.92188 + 0.5) - floor(frame.width * 0.07812 + 0.5), height: floor(frame.height * 0.77344 + 0.5) - floor(frame.height * 0.21875 + 0.5))
            let boosterTextContent = NSString(string: "x2")
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            let boosterStyle = NSMutableParagraphStyle()
            boosterStyle.alignment = .center

            let boosterFontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: 21)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: boosterStyle]

            let boosterTextHeight: CGFloat = boosterTextContent.boundingRect(with: CGSize(width: boosterRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: boosterFontAttributes, context: nil).size.height
            context!.saveGState()
            context!.clip(to: boosterRect)
            boosterTextContent.draw(in: CGRect(x: boosterRect.minX, y: boosterRect.minY + (boosterRect.height - boosterTextHeight) / 2, width: boosterRect.width, height: boosterTextHeight), withAttributes: boosterFontAttributes)
            context!.restoreGState()
            context!.restoreGState()

        }


        if (store_icon_ads) {
            //// Oval Drawing
            let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.07031 + 0.5), y: frame.minY + floor(frame.height * 0.07031 + 0.5), width: floor(frame.width * 0.92969 + 0.5) - floor(frame.width * 0.07031 + 0.5), height: floor(frame.height * 0.92969 + 0.5) - floor(frame.height * 0.07031 + 0.5)))
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            red.setFill()
            ovalPath.fill()

            ////// Oval Inner Shadow
            context!.saveGState()
            context!.clip(to: ovalPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let ovalOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: ovalOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            ovalOpaqueShadow.setFill()
            ovalPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()



            //// Oval 2 Drawing
            let oval2Rect = CGRect(x: frame.minX + floor(frame.width * 0.14062 + 0.5), y: frame.minY + floor(frame.height * 0.13281 + 0.5), width: floor(frame.width * 0.86719 + 0.5) - floor(frame.width * 0.14062 + 0.5), height: floor(frame.height * 0.85938 + 0.5) - floor(frame.height * 0.13281 + 0.5))
            let oval2Path = UIBezierPath(ovalIn: oval2Rect)
            white.setFill()
            oval2Path.fill()
            let oval2TextContent = NSString(string: "No Ads")
            let oval2Style = NSMutableParagraphStyle()
            oval2Style.alignment = .center

            let oval2FontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: UIFont.systemFontSize)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: oval2Style]

            let oval2TextHeight: CGFloat = oval2TextContent.boundingRect(with: CGSize(width: oval2Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: oval2FontAttributes, context: nil).size.height
            context!.saveGState()
            context!.clip(to: oval2Rect)
            oval2TextContent.draw(in: CGRect(x: oval2Rect.minX, y: oval2Rect.minY + (oval2Rect.height - oval2TextHeight) / 2, width: oval2Rect.width, height: oval2TextHeight), withAttributes: oval2FontAttributes)
            context!.restoreGState()
        }


        if (store_icon_credits) {
            //// Credits Drawing
            let creditsRect = CGRect(x: frame.minX + floor(frame.width * 0.07812 + 0.5), y: frame.minY + floor(frame.height * 0.21875 + 0.5), width: floor(frame.width * 0.92188 + 0.5) - floor(frame.width * 0.07812 + 0.5), height: floor(frame.height * 0.77344 + 0.5) - floor(frame.height * 0.21875 + 0.5))
            let creditsTextContent = NSString(string: "C++")
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            let creditsStyle = NSMutableParagraphStyle()
            creditsStyle.alignment = .center

            let creditsFontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: 21)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: creditsStyle]

            let creditsTextHeight: CGFloat = creditsTextContent.boundingRect(with: CGSize(width: creditsRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: creditsFontAttributes, context: nil).size.height
            context!.saveGState()
            context!.clip(to: creditsRect)
            creditsTextContent.draw(in: CGRect(x: creditsRect.minX, y: creditsRect.minY + (creditsRect.height - creditsTextHeight) / 2, width: creditsRect.width, height: creditsTextHeight), withAttributes: creditsFontAttributes)
            context!.restoreGState()
            context!.restoreGState()

        }


        if (store_icon_restore) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: frame.minX + 0.56758 * frame.width, y: frame.minY + 0.11975 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.56908 * frame.width, y: frame.minY + 0.12011 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.59082 * frame.width, y: frame.minY + 0.14186 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.57919 * frame.width, y: frame.minY + 0.12379 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.58715 * frame.width, y: frame.minY + 0.13175 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.59375 * frame.width, y: frame.minY + 0.17690 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.59375 * frame.width, y: frame.minY + 0.15111 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.59375 * frame.width, y: frame.minY + 0.15971 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.59375 * frame.width, y: frame.minY + 0.63399 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.59375 * frame.width, y: frame.minY + 0.17690 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.59375 * frame.width, y: frame.minY + 0.44329 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.66273 * frame.width, y: frame.minY + 0.56501 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.63054 * frame.width, y: frame.minY + 0.59720 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.66273 * frame.width, y: frame.minY + 0.56501 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.68826 * frame.width, y: frame.minY + 0.54310 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.67489 * frame.width, y: frame.minY + 0.55285 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.68097 * frame.width, y: frame.minY + 0.54677 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.68958 * frame.width, y: frame.minY + 0.54230 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.70341 * frame.width, y: frame.minY + 0.53892 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.69398 * frame.width, y: frame.minY + 0.54025 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.69868 * frame.width, y: frame.minY + 0.53912 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.72033 * frame.width, y: frame.minY + 0.54230 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.70917 * frame.width, y: frame.minY + 0.53868 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.71498 * frame.width, y: frame.minY + 0.53980 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.74718 * frame.width, y: frame.minY + 0.56501 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.72894 * frame.width, y: frame.minY + 0.54677 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.73502 * frame.width, y: frame.minY + 0.55285 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.77874 * frame.width, y: frame.minY + 0.59657 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.80065 * frame.width, y: frame.minY + 0.62210 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.79090 * frame.width, y: frame.minY + 0.60873 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79698 * frame.width, y: frame.minY + 0.61481 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.80145 * frame.width, y: frame.minY + 0.62342 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.80145 * frame.width, y: frame.minY + 0.65417 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.80600 * frame.width, y: frame.minY + 0.63317 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.80600 * frame.width, y: frame.minY + 0.64442 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.77874 * frame.width, y: frame.minY + 0.68102 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.79698 * frame.width, y: frame.minY + 0.66278 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79090 * frame.width, y: frame.minY + 0.66886 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.60355 * frame.width, y: frame.minY + 0.85621 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.57802 * frame.width, y: frame.minY + 0.87812 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.59139 * frame.width, y: frame.minY + 0.86837 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.58531 * frame.width, y: frame.minY + 0.87445 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.57670 * frame.width, y: frame.minY + 0.87893 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.55784 * frame.width, y: frame.minY + 0.88217 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.57075 * frame.width, y: frame.minY + 0.88170 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.56423 * frame.width, y: frame.minY + 0.88278 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.53404 * frame.width, y: frame.minY + 0.88281 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.55169 * frame.width, y: frame.minY + 0.88281 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.54443 * frame.width, y: frame.minY + 0.88281 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.45815 * frame.width, y: frame.minY + 0.88281 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.43440 * frame.width, y: frame.minY + 0.88222 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.44759 * frame.width, y: frame.minY + 0.88281 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.44027 * frame.width, y: frame.minY + 0.88281 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.41614 * frame.width, y: frame.minY + 0.87893 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.42820 * frame.width, y: frame.minY + 0.88271 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.42191 * frame.width, y: frame.minY + 0.88161 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.38929 * frame.width, y: frame.minY + 0.85621 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.40753 * frame.width, y: frame.minY + 0.87445 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.40145 * frame.width, y: frame.minY + 0.86837 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.21410 * frame.width, y: frame.minY + 0.68102 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.19219 * frame.width, y: frame.minY + 0.65549 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20194 * frame.width, y: frame.minY + 0.66886 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.19586 * frame.width, y: frame.minY + 0.66278 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.19139 * frame.width, y: frame.minY + 0.65417 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.19139 * frame.width, y: frame.minY + 0.62342 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.18684 * frame.width, y: frame.minY + 0.64442 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.18684 * frame.width, y: frame.minY + 0.63317 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.21410 * frame.width, y: frame.minY + 0.59657 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.19586 * frame.width, y: frame.minY + 0.61481 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.20194 * frame.width, y: frame.minY + 0.60873 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.24566 * frame.width, y: frame.minY + 0.56501 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.27119 * frame.width, y: frame.minY + 0.54310 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.25782 * frame.width, y: frame.minY + 0.55285 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.26390 * frame.width, y: frame.minY + 0.54677 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.27251 * frame.width, y: frame.minY + 0.54230 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.30326 * frame.width, y: frame.minY + 0.54230 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.28226 * frame.width, y: frame.minY + 0.53775 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.29351 * frame.width, y: frame.minY + 0.53775 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.33011 * frame.width, y: frame.minY + 0.56501 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.31187 * frame.width, y: frame.minY + 0.54677 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.31795 * frame.width, y: frame.minY + 0.55285 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.39844 * frame.width, y: frame.minY + 0.63334 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.33011 * frame.width, y: frame.minY + 0.56501 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.36192 * frame.width, y: frame.minY + 0.59683 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.39844 * frame.width, y: frame.minY + 0.17690 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39844 * frame.width, y: frame.minY + 0.44268 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.39844 * frame.width, y: frame.minY + 0.17690 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.40100 * frame.width, y: frame.minY + 0.14336 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.39844 * frame.width, y: frame.minY + 0.15971 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.39844 * frame.width, y: frame.minY + 0.15111 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.40136 * frame.width, y: frame.minY + 0.14186 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.42311 * frame.width, y: frame.minY + 0.12011 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.40504 * frame.width, y: frame.minY + 0.13175 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.41300 * frame.width, y: frame.minY + 0.12379 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.45815 * frame.width, y: frame.minY + 0.11719 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.43236 * frame.width, y: frame.minY + 0.11719 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.44096 * frame.width, y: frame.minY + 0.11719 * frame.height))
            bezierPath.addLine(to: CGPoint(x: frame.minX + 0.53404 * frame.width, y: frame.minY + 0.11719 * frame.height))
            bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.56758 * frame.width, y: frame.minY + 0.11975 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.55123 * frame.width, y: frame.minY + 0.11719 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.55983 * frame.width, y: frame.minY + 0.11719 * frame.height))
            bezierPath.close()
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            StyleKitName.grass.setFill()
            bezierPath.fill()

            ////// Bezier Inner Shadow
            context!.saveGState()
            context!.clip(to: bezierPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let bezierOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: bezierOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            bezierOpaqueShadow.setFill()
            bezierPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            bezierPath.lineWidth = 1
            bezierPath.stroke()
        }
    }

    public class func drawDailyTab(frame: CGRect = CGRect(x: 0, y: 5, width: 128, height: 120), isSelected: Bool = true, textSize: CGFloat = 12, bonus_str: String = "250 Credits", bonus_days: String = "Day: 1") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let greyTransparent = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.196)
        let grey = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.392)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Variable Declarations
        let bonus_color = isSelected ? grey : greyTransparent
        let bonus_text = "Daily Bonus: \n" + bonus_str

        //// Rectangle Drawing
        let rectangleRect = CGRect(x: frame.minX + floor(frame.width * 0.00391) + 0.5, y: frame.minY + floor(frame.height * 0.00000) + 0.5, width: floor(frame.width * 0.99609) - floor(frame.width * 0.00391), height: floor(frame.height * 0.99583 + 0.5) - floor(frame.height * 0.00000) - 0.5)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        greyTransparent.setFill()
        rectanglePath.fill()
        context!.restoreGState()

        black.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
        let rectangleStyle = NSMutableParagraphStyle()
        rectangleStyle.alignment = .center

        let rectangleFontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: textSize)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: rectangleStyle]

        let rectangleTextHeight: CGFloat = NSString(string: bonus_text).boundingRect(with: CGSize(width: rectangleRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).size.height
        context!.saveGState()
        context!.clip(to: rectangleRect)
        NSString(string: bonus_text).draw(in: CGRect(x: rectangleRect.minX, y: rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, width: rectangleRect.width, height: rectangleTextHeight), withAttributes: rectangleFontAttributes)
        context!.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Rect = CGRect(x: frame.minX + floor(frame.width * 0.00781 + 0.5), y: frame.minY + floor(frame.height * 0.72500 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00781 + 0.5), height: floor(frame.height * 0.99167 + 0.5) - floor(frame.height * 0.72500 + 0.5))
        let rectangle2Path = UIBezierPath(roundedRect: rectangle2Rect, byRoundingCorners: [UIRectCorner.topLeft, UIRectCorner.topRight], cornerRadii: CGSize(width: 5, height: 5))
        rectangle2Path.close()
        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        bonus_color.setFill()
        rectangle2Path.fill()
        context!.restoreGState()

        let rectangle2Style = NSMutableParagraphStyle()
        rectangle2Style.alignment = .center

        let rectangle2FontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: textSize)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: rectangle2Style]

        let rectangle2TextHeight: CGFloat = NSString(string: bonus_days).boundingRect(with: CGSize(width: rectangle2Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: rectangle2FontAttributes, context: nil).size.height
        context!.saveGState()
        context!.clip(to: rectangle2Rect)
        NSString(string: bonus_days).draw(in: CGRect(x: rectangle2Rect.minX, y: rectangle2Rect.minY + (rectangle2Rect.height - rectangle2TextHeight) / 2, width: rectangle2Rect.width, height: rectangle2TextHeight), withAttributes: rectangle2FontAttributes)
        context!.restoreGState()
    }

    public class func drawBuyButton(frame: CGRect = CGRect(x: 0, y: 0, width: 128, height: 128)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5)), byRoundingCorners: UIRectCorner.topLeft, cornerRadii: CGSize(width: 5, height: 5))
        rectanglePath.close()
        StyleKitName.grass.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context!.saveGState()
        context!.clip(to: rectanglePath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: rectangleOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()



        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: frame.minX + floor(frame.width * 0.03125 + 0.5), y: frame.minY + floor(frame.height * 0.03125 + 0.5), width: floor(frame.width * 0.96875 + 0.5) - floor(frame.width * 0.03125 + 0.5), height: floor(frame.height * 0.96875 + 0.5) - floor(frame.height * 0.03125 + 0.5)), byRoundingCorners: UIRectCorner.topLeft, cornerRadii: CGSize(width: 5, height: 5))
        rectangle2Path.close()
        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        white.setFill()
        rectangle2Path.fill()
        context!.restoreGState()



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 0.57539 * frame.width, y: frame.minY + 0.12756 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.57689 * frame.width, y: frame.minY + 0.12793 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.59864 * frame.width, y: frame.minY + 0.14967 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.58700 * frame.width, y: frame.minY + 0.13160 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.59496 * frame.width, y: frame.minY + 0.13956 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.60156 * frame.width, y: frame.minY + 0.18471 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.60156 * frame.width, y: frame.minY + 0.15892 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.60156 * frame.width, y: frame.minY + 0.16752 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.60156 * frame.width, y: frame.minY + 0.64180 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.60156 * frame.width, y: frame.minY + 0.18471 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.60156 * frame.width, y: frame.minY + 0.45110 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.67054 * frame.width, y: frame.minY + 0.57282 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.63835 * frame.width, y: frame.minY + 0.60502 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.67054 * frame.width, y: frame.minY + 0.57282 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.69607 * frame.width, y: frame.minY + 0.55091 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.68270 * frame.width, y: frame.minY + 0.56067 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.68878 * frame.width, y: frame.minY + 0.55459 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.69739 * frame.width, y: frame.minY + 0.55011 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.71122 * frame.width, y: frame.minY + 0.54674 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.70179 * frame.width, y: frame.minY + 0.54806 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.70649 * frame.width, y: frame.minY + 0.54694 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.72814 * frame.width, y: frame.minY + 0.55011 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.71698 * frame.width, y: frame.minY + 0.54649 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.72279 * frame.width, y: frame.minY + 0.54762 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.75499 * frame.width, y: frame.minY + 0.57282 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.73675 * frame.width, y: frame.minY + 0.55459 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.74283 * frame.width, y: frame.minY + 0.56067 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.78655 * frame.width, y: frame.minY + 0.60439 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.80846 * frame.width, y: frame.minY + 0.62991 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.79871 * frame.width, y: frame.minY + 0.61654 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.80479 * frame.width, y: frame.minY + 0.62262 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.80926 * frame.width, y: frame.minY + 0.63124 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.80926 * frame.width, y: frame.minY + 0.66198 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.81381 * frame.width, y: frame.minY + 0.64098 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.81381 * frame.width, y: frame.minY + 0.65224 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.78655 * frame.width, y: frame.minY + 0.68883 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.80479 * frame.width, y: frame.minY + 0.67060 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.79871 * frame.width, y: frame.minY + 0.67667 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.61136 * frame.width, y: frame.minY + 0.86403 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.58583 * frame.width, y: frame.minY + 0.88594 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.59920 * frame.width, y: frame.minY + 0.87618 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.59312 * frame.width, y: frame.minY + 0.88226 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.58451 * frame.width, y: frame.minY + 0.88674 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.56566 * frame.width, y: frame.minY + 0.88998 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.57856 * frame.width, y: frame.minY + 0.88951 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.57205 * frame.width, y: frame.minY + 0.89059 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.54185 * frame.width, y: frame.minY + 0.89062 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.55950 * frame.width, y: frame.minY + 0.89063 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.55225 * frame.width, y: frame.minY + 0.89062 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.46596 * frame.width, y: frame.minY + 0.89062 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.44221 * frame.width, y: frame.minY + 0.89003 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.45540 * frame.width, y: frame.minY + 0.89062 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.44809 * frame.width, y: frame.minY + 0.89062 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.42395 * frame.width, y: frame.minY + 0.88674 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.43602 * frame.width, y: frame.minY + 0.89052 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.42972 * frame.width, y: frame.minY + 0.88943 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.39710 * frame.width, y: frame.minY + 0.86403 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.41534 * frame.width, y: frame.minY + 0.88226 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.40926 * frame.width, y: frame.minY + 0.87618 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.22191 * frame.width, y: frame.minY + 0.68883 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.20000 * frame.width, y: frame.minY + 0.66330 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20975 * frame.width, y: frame.minY + 0.67667 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.20367 * frame.width, y: frame.minY + 0.67060 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.19920 * frame.width, y: frame.minY + 0.66198 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.19920 * frame.width, y: frame.minY + 0.63124 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.19466 * frame.width, y: frame.minY + 0.65224 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.19466 * frame.width, y: frame.minY + 0.64098 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.22191 * frame.width, y: frame.minY + 0.60439 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.20367 * frame.width, y: frame.minY + 0.62262 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.20975 * frame.width, y: frame.minY + 0.61654 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.25347 * frame.width, y: frame.minY + 0.57282 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.27900 * frame.width, y: frame.minY + 0.55091 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.26563 * frame.width, y: frame.minY + 0.56067 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.27171 * frame.width, y: frame.minY + 0.55459 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.28032 * frame.width, y: frame.minY + 0.55011 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.31107 * frame.width, y: frame.minY + 0.55011 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.29007 * frame.width, y: frame.minY + 0.54557 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.30133 * frame.width, y: frame.minY + 0.54557 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.33792 * frame.width, y: frame.minY + 0.57282 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.31968 * frame.width, y: frame.minY + 0.55459 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.32576 * frame.width, y: frame.minY + 0.56067 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.64115 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.33792 * frame.width, y: frame.minY + 0.57282 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.36974 * frame.width, y: frame.minY + 0.60464 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.18471 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.45050 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.18471 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.40881 * frame.width, y: frame.minY + 0.15117 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.16752 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.40625 * frame.width, y: frame.minY + 0.15892 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.40918 * frame.width, y: frame.minY + 0.14967 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.43092 * frame.width, y: frame.minY + 0.12793 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.41285 * frame.width, y: frame.minY + 0.13956 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.42081 * frame.width, y: frame.minY + 0.13160 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.46596 * frame.width, y: frame.minY + 0.12500 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.44017 * frame.width, y: frame.minY + 0.12500 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.44877 * frame.width, y: frame.minY + 0.12500 * frame.height))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 0.54185 * frame.width, y: frame.minY + 0.12500 * frame.height))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 0.57539 * frame.width, y: frame.minY + 0.12756 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.55904 * frame.width, y: frame.minY + 0.12500 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.56764 * frame.width, y: frame.minY + 0.12500 * frame.height))
        bezierPath.close()
        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        StyleKitName.grass.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        context!.saveGState()
        context!.clip(to: bezierPath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezierOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: bezierOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.restoreGState()

        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public class func drawBankButton(frame: CGRect = CGRect(x: 0, y: 0, width: 96, height: 96), addMoney: Bool = true, addAll: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let red = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let green = UIColor(red: 0.000, green: 1.000, blue: 0.000, alpha: 1.000)

        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Variable Declarations
        let btn_color = addMoney ? green : red
        let btn_arrowdir: CGFloat = addMoney ? 0 : 180
        let btn_singlearrows = addAll ? false : true
        let btn_doublearrows = addAll ? true : false

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.05208 + 0.5), y: frame.minY + floor(frame.height * 0.04167 + 0.5), width: floor(frame.width * 0.95833 + 0.5) - floor(frame.width * 0.05208 + 0.5), height: floor(frame.height * 0.94792 + 0.5) - floor(frame.height * 0.04167 + 0.5)))
        context!.saveGState()
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
        btn_color.setFill()
        ovalPath.fill()
        context!.restoreGState()

        UIColor.black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        if (btn_singlearrows) {
            //// Arrow Drawing
            context!.saveGState()
            context!.translateBy(x: frame.minX + 0.50521 * frame.width, y: frame.minY + 47.5)
            context!.rotate(by: -btn_arrowdir * CGFloat(M_PI) / 180)

            let arrowPath = UIBezierPath()
            arrowPath.move(to: CGPoint(x: -4, y: 35))
            arrowPath.addLine(to: CGPoint(x: 4, y: 35))
            arrowPath.addLine(to: CGPoint(x: 4, y: -16))
            arrowPath.addLine(to: CGPoint(x: 12, y: -7))
            arrowPath.addLine(to: CGPoint(x: 19, y: -14))
            arrowPath.addLine(to: CGPoint(x: 0, y: -34))
            arrowPath.addLine(to: CGPoint(x: -19, y: -14))
            arrowPath.addLine(to: CGPoint(x: -13, y: -7))
            arrowPath.addLine(to: CGPoint(x: -4, y: -16))
            arrowPath.addLine(to: CGPoint(x: -4, y: 35))
            arrowPath.close()
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            arrowPath.fill()

            ////// Arrow Inner Shadow
            context!.saveGState()
            context!.clip(to: arrowPath.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let arrowOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: arrowOpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            arrowOpaqueShadow.setFill()
            arrowPath.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            arrowPath.lineWidth = 1
            arrowPath.stroke()

            context!.restoreGState()
        }


        if (btn_doublearrows) {
            //// Arrow 2 Drawing
            context!.saveGState()
            context!.translateBy(x: frame.minX + 0.70312 * frame.width, y: frame.minY + 47)
            context!.rotate(by: -btn_arrowdir * CGFloat(M_PI) / 180)

            let arrow2Path = UIBezierPath()
            arrow2Path.move(to: CGPoint(x: -4, y: 34.5))
            arrow2Path.addLine(to: CGPoint(x: 4, y: 34.5))
            arrow2Path.addLine(to: CGPoint(x: 4, y: -16.5))
            arrow2Path.addLine(to: CGPoint(x: 12, y: -7.5))
            arrow2Path.addLine(to: CGPoint(x: 19, y: -14.5))
            arrow2Path.addLine(to: CGPoint(x: 0, y: -34.5))
            arrow2Path.addLine(to: CGPoint(x: -19, y: -14.5))
            arrow2Path.addLine(to: CGPoint(x: -13, y: -7.5))
            arrow2Path.addLine(to: CGPoint(x: -4, y: -16.5))
            arrow2Path.addLine(to: CGPoint(x: -4, y: 34.5))
            arrow2Path.close()
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            arrow2Path.fill()

            ////// Arrow 2 Inner Shadow
            context!.saveGState()
            context!.clip(to: arrow2Path.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let arrow2OpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: arrow2OpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            arrow2OpaqueShadow.setFill()
            arrow2Path.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            arrow2Path.lineWidth = 1
            arrow2Path.stroke()

            context!.restoreGState()


            //// Arrow 3 Drawing
            context!.saveGState()
            context!.translateBy(x: frame.minX + 0.30729 * frame.width, y: frame.minY + 47)
            context!.rotate(by: -btn_arrowdir * CGFloat(M_PI) / 180)

            let arrow3Path = UIBezierPath()
            arrow3Path.move(to: CGPoint(x: -4, y: 34.5))
            arrow3Path.addLine(to: CGPoint(x: 4, y: 34.5))
            arrow3Path.addLine(to: CGPoint(x: 4, y: -16.5))
            arrow3Path.addLine(to: CGPoint(x: 12, y: -7.5))
            arrow3Path.addLine(to: CGPoint(x: 19, y: -14.5))
            arrow3Path.addLine(to: CGPoint(x: 0, y: -34.5))
            arrow3Path.addLine(to: CGPoint(x: -19, y: -14.5))
            arrow3Path.addLine(to: CGPoint(x: -13, y: -7.5))
            arrow3Path.addLine(to: CGPoint(x: -4, y: -16.5))
            arrow3Path.addLine(to: CGPoint(x: -4, y: 34.5))
            arrow3Path.close()
            context!.saveGState()
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
            UIColor.white.setFill()
            arrow3Path.fill()

            ////// Arrow 3 Inner Shadow
            context!.saveGState()
            context!.clip(to: arrow3Path.bounds)
            context!.setShadow(offset: CGSize.zero, blur: 0)
            context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)
            let arrow3OpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
            context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: arrow3OpaqueShadow.cgColor)
            context!.setBlendMode(.sourceOut)
            context!.beginTransparencyLayer(auxiliaryInfo: nil)

            arrow3OpaqueShadow.setFill()
            arrow3Path.fill()

            context!.endTransparencyLayer()
            context!.endTransparencyLayer()
            context!.restoreGState()

            context!.restoreGState()

            UIColor.black.setStroke()
            arrow3Path.lineWidth = 1
            arrow3Path.stroke()

            context!.restoreGState()
        }
    }

    public class func drawIPhoneIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 60, height: 60))
        StyleKitName.sky.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 2, y: 4, width: 56, height: 48)
        context!.saveGState()
        UIRectClip(symbolRect)
        context!.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        StyleKitName.drawBird(frame: CGRect(x: 0, y: 0, width: symbolRect.size.width, height: symbolRect.size.height), golden: false, colorInput: 0, bird_wing_down: false, bird_wing_up: true)
        context!.restoreGState()
    }

    public class func drawSettingsIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 29, height: 29))
        StyleKitName.sky.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 2, width: 29, height: 25)
        context!.saveGState()
        UIRectClip(symbolRect)
        context!.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        StyleKitName.drawBird(frame: CGRect(x: 0, y: 0, width: symbolRect.size.width, height: symbolRect.size.height), golden: false, colorInput: 0, bird_wing_down: false, bird_wing_up: true)
        context!.restoreGState()
    }

    public class func drawSpotlightIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 40, height: 40))
        StyleKitName.sky.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 3, width: 40, height: 34)
        context!.saveGState()
        UIRectClip(symbolRect)
        context!.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        StyleKitName.drawBird(frame: CGRect(x: 0, y: 0, width: symbolRect.size.width, height: symbolRect.size.height), golden: false, colorInput: 0, bird_wing_down: false, bird_wing_up: true)
        context!.restoreGState()
    }

    public class func drawArtwork1024p() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024))
        StyleKitName.sky.setFill()
        rectanglePath.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 12, y: 87, width: 1000, height: 850)
        context!.saveGState()
        UIRectClip(symbolRect)
        context!.translateBy(x: symbolRect.origin.x, y: symbolRect.origin.y)

        StyleKitName.drawBird(frame: CGRect(x: 0, y: 0, width: symbolRect.size.width, height: symbolRect.size.height), golden: false, colorInput: 0, bird_wing_down: true, bird_wing_up: false)
        context!.restoreGState()
    }

    public class func drawBox(frame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + 1, y: frame.minY, width: floor((frame.width - 1) * 0.99791 + 1) - 0.5, height: floor((frame.height) * 0.99583 + 0.5)), cornerRadius: 5)
        StyleKitName.sand.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context!.saveGState()
        context!.clip(to: rectanglePath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: rectangleOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        UIColor.black.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
    }

    public class func drawButton(frame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 90), textInput: String = "Hello, World!", textSize: CGFloat = 12) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5)), cornerRadius: 10)
        UIColor.white.setFill()
        rectanglePath.fill()
        UIColor.black.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Rect = CGRect(x: frame.minX + floor(frame.width * 0.02813) + 0.5, y: frame.minY + floor(frame.height * 0.03889) + 0.5, width: floor(frame.width * 0.97813) - floor(frame.width * 0.02813), height: floor(frame.height * 0.96111) - floor(frame.height * 0.03889))
        let rectangle2Path = UIBezierPath(roundedRect: rectangle2Rect, cornerRadius: 10)
        StyleKitName.sand.setFill()
        rectangle2Path.fill()

        ////// Rectangle 2 Inner Shadow
        context!.saveGState()
        context!.clip(to: rectangle2Path.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangle2OpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: rectangle2OpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangle2OpaqueShadow.setFill()
        rectangle2Path.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        UIColor.black.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()
        let rectangle2Style = NSMutableParagraphStyle()
        rectangle2Style.alignment = .center

        let rectangle2FontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: textSize)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: rectangle2Style]

        let rectangle2TextHeight: CGFloat = NSString(string: textInput).boundingRect(with: CGSize(width: rectangle2Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: rectangle2FontAttributes, context: nil).size.height
        context!.saveGState()
        context!.clip(to: rectangle2Rect)
        NSString(string: textInput).draw(in: CGRect(x: rectangle2Rect.minX, y: rectangle2Rect.minY + (rectangle2Rect.height - rectangle2TextHeight) / 2, width: rectangle2Rect.width, height: rectangle2TextHeight), withAttributes: rectangle2FontAttributes)
        context!.restoreGState()
    }

    public class func drawBackButton(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 75)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: frame.minX + 0.32405 * frame.width, y: frame.minY + 0.12540 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.41596 * frame.width, y: frame.minY + 0.24795 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.29192 * frame.width, y: frame.minY + 0.41333 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.41596 * frame.width, y: frame.minY + 0.24795 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.35046 * frame.width, y: frame.minY + 0.33529 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.97000 * frame.width, y: frame.minY + 0.41333 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.97000 * frame.width, y: frame.minY + 0.58667 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.29192 * frame.width, y: frame.minY + 0.58667 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.41404 * frame.width, y: frame.minY + 0.74949 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.34996 * frame.width, y: frame.minY + 0.66405 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.41404 * frame.width, y: frame.minY + 0.74949 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.37452 * frame.width, y: frame.minY + 0.80218 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.41404 * frame.width, y: frame.minY + 0.74949 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.39516 * frame.width, y: frame.minY + 0.77465 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.36270 * frame.width, y: frame.minY + 0.81794 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.37061 * frame.width, y: frame.minY + 0.80740 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.36663 * frame.width, y: frame.minY + 0.81270 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.32211 * frame.width, y: frame.minY + 0.87205 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.34164 * frame.width, y: frame.minY + 0.84601 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.32211 * frame.width, y: frame.minY + 0.87205 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.23287 * frame.width, y: frame.minY + 0.75306 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.32197 * frame.width, y: frame.minY + 0.87186 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.27940 * frame.width, y: frame.minY + 0.81510 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.22495 * frame.width, y: frame.minY + 0.74249 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.23024 * frame.width, y: frame.minY + 0.74955 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.22760 * frame.width, y: frame.minY + 0.74603 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.11482 * frame.width, y: frame.minY + 0.59565 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.17105 * frame.width, y: frame.minY + 0.67064 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.11482 * frame.width, y: frame.minY + 0.59565 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.11019 * frame.width, y: frame.minY + 0.58948 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.11492 * frame.width, y: frame.minY + 0.59562 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.11316 * frame.width, y: frame.minY + 0.59334 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.10808 * frame.width, y: frame.minY + 0.58667 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.10881 * frame.width, y: frame.minY + 0.58764 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.10808 * frame.width, y: frame.minY + 0.58667 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.04050 * frame.width, y: frame.minY + 0.49909 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.10809 * frame.width, y: frame.minY + 0.58677 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.04050 * frame.width, y: frame.minY + 0.49909 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.11490 * frame.width, y: frame.minY + 0.40170 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.04016 * frame.width, y: frame.minY + 0.49865 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.11338 * frame.width, y: frame.minY + 0.40367 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.11492 * frame.width, y: frame.minY + 0.40421 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.11492 * frame.width, y: frame.minY + 0.40169 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.11492 * frame.width, y: frame.minY + 0.40257 * frame.height))
        bezier2Path.addCurve(to: CGPoint(x: frame.minX + 0.32399 * frame.width, y: frame.minY + 0.12544 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.14662 * frame.width, y: frame.minY + 0.36194 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.32077 * frame.width, y: frame.minY + 0.12975 * frame.height))
        bezier2Path.addLine(to: CGPoint(x: frame.minX + 0.32405 * frame.width, y: frame.minY + 0.12540 * frame.height))
        bezier2Path.close()
        UIColor.white.setFill()
        bezier2Path.fill()

        ////// Bezier 2 Inner Shadow
        context!.saveGState()
        context!.clip(to: bezier2Path.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezier2OpaqueShadow = (StyleKitName.shadow_Light.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: bezier2OpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        bezier2OpaqueShadow.setFill()
        bezier2Path.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.saveGState()
        context!.setShadow(offset: StyleKitName.shadow_Light.shadowOffset, blur: StyleKitName.shadow_Light.shadowBlurRadius, color: (StyleKitName.shadow_Light.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()
        context!.restoreGState()
    }

    public class func drawSun(frame: CGRect = CGRect(x: 0, y: 0, width: 128, height: 128)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow = NSShadow(color: StyleKitName.sunYellow, offset: CGSize(width: 0.1, height: -0.1), blurRadius: 11)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + floor(frame.width * 0.09375 + 0.5), y: frame.minY + floor(frame.height * 0.08594 + 0.5), width: floor(frame.width * 0.91406 + 0.5) - floor(frame.width * 0.09375 + 0.5), height: floor(frame.height * 0.90625 + 0.5) - floor(frame.height * 0.08594 + 0.5)))
        context!.saveGState()
        context!.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        StyleKitName.sunYellow.setFill()
        ovalPath.fill()

        ////// Oval Inner Shadow
        context!.saveGState()
        context!.clip(to: ovalPath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let ovalOpaqueShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: ovalOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        ovalOpaqueShadow.setFill()
        ovalPath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.restoreGState()
    }

    public class func drawNotificationBar(frame: CGRect = CGRect(x: 0, y: 5, width: 750, height: 100), textInput: String = "Hello, World!", textSize: CGFloat = 12) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Shadow Declarations
        let shadow_UltraLight = NSShadow(color: UIColor.black.withAlphaComponent(0.25), offset: CGSize(width: 3.1, height: 3.1), blurRadius: 5)

        //// Rectangle Drawing
        let rectangleRect = CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, byRoundingCorners: [UIRectCorner.bottomLeft, UIRectCorner.bottomRight], cornerRadii: CGSize(width: 10, height: 10))
        rectanglePath.close()
        UIColor.white.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context!.saveGState()
        context!.clip(to: rectanglePath.bounds)
        context!.setShadow(offset: CGSize.zero, blur: 0)
        context!.setAlpha((shadow_UltraLight.shadowColor as! UIColor).cgColor.alpha)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (shadow_UltraLight.shadowColor as! UIColor).withAlphaComponent(1)
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: rectangleOpaqueShadow.cgColor)
        context!.setBlendMode(.sourceOut)
        context!.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context!.endTransparencyLayer()
        context!.endTransparencyLayer()
        context!.restoreGState()

        context!.saveGState()
        context!.setShadow(offset: shadow_UltraLight.shadowOffset, blur: shadow_UltraLight.shadowBlurRadius, color: (shadow_UltraLight.shadowColor as! UIColor).cgColor)
        UIColor.black.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
        context!.restoreGState()
        let rectangleStyle = NSMutableParagraphStyle()
        rectangleStyle.alignment = .center

        let rectangleFontAttributes = [NSFontAttributeName: UIFont(name: "Chalkduster", size: textSize)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: rectangleStyle]

        let rectangleTextHeight: CGFloat = NSString(string: textInput).boundingRect(with: CGSize(width: rectangleRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.usesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).size.height
        context!.saveGState()
        context!.clip(to: rectangleRect)
        NSString(string: textInput).draw(in: CGRect(x: rectangleRect.minX, y: rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, width: rectangleRect.width, height: rectangleTextHeight), withAttributes: rectangleFontAttributes)
        context!.restoreGState()
    }

    public class func drawStoreItemBox(frame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 120)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let whiteTransparent = white

        //// Shadow Declarations
        let shadow2 = NSShadow(color: UIColor.black.withAlphaComponent(0.8), offset: CGSize(width: 0.1, height: -0.1), blurRadius: 5)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + floor(frame.width * 0.03125 + 0.5), y: frame.minY + floor(frame.height * 0.00000) + 0.5, width: floor(frame.width * 0.96875 + 0.5) - floor(frame.width * 0.03125 + 0.5), height: floor(frame.height * 0.99583 + 0.5) - floor(frame.height * 0.00000) - 0.5))
        context!.saveGState()
        context!.setShadow(offset: shadow2.shadowOffset, blur: shadow2.shadowBlurRadius, color: (shadow2.shadowColor as! UIColor).cgColor)
        whiteTransparent.setFill()
        rectanglePath.fill()
        context!.restoreGState()

        UIColor.lightGray.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()
    }

    public class func drawSkybox(frame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120)) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5)))
        StyleKitName.sky.setFill()
        rectanglePath.fill()
    }

    public class func drawDailyBonus(frame: CGRect = CGRect(x: 0, y: 0, width: 640, height: 125)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let greyTransparent = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.196)

        //// Shadow Declarations
        let shadow3 = NSShadow(color: UIColor.black.withAlphaComponent(0.32), offset: CGSize(width: 0.1, height: 3.1), blurRadius: 5)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + floor(frame.width * 0.00000 + 0.5), y: frame.minY + floor(frame.height * 0.00000 + 0.5), width: floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), height: floor(frame.height * 0.96000 + 0.5) - floor(frame.height * 0.00000 + 0.5)))
        context!.saveGState()
        context!.setShadow(offset: shadow3.shadowOffset, blur: shadow3.shadowBlurRadius, color: (shadow3.shadowColor as! UIColor).cgColor)
        greyTransparent.setFill()
        rectanglePath.fill()
        context!.restoreGState()
    }

    //// Generated Images

    public class func imageOfMenuBar(frame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 90), isSelected: Bool = true, menuBarIcon: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawMenuBar(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), isSelected: isSelected, menuBarIcon: menuBarIcon)

        let imageOfMenuBar = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfMenuBar!
    }

    public class func imageOfBird(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 85), golden: Bool = false, colorInput: CGFloat = 0, bird_wing_down: Bool = false, bird_wing_up: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBird(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), golden: golden, colorInput: colorInput, bird_wing_down: bird_wing_down, bird_wing_up: bird_wing_up)

        let imageOfBird = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBird!
    }

    public class func imageOfBottom(frame: CGRect = CGRect(x: 0, y: 0, width: 640, height: 175), isWinter: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBottom(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), isWinter: isWinter)

        let imageOfBottom = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBottom!
    }

    public class func imageOfCloud(frame: CGRect = CGRect(x: 0, y: 0, width: 256, height: 128), textInput: String = "Hello, World!", textSize: CGFloat = 12) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawCloud(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), textInput: textInput, textSize: textSize)

        let imageOfCloud = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCloud!
    }

    public class func imageOfPauseButton(frame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 65), toggleVisibility: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawPauseButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), toggleVisibility: toggleVisibility)

        let imageOfPauseButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfPauseButton!
    }

    public class func imageOfGun(frame: CGRect = CGRect(x: 0, y: 0, width: 150, height: 20)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawGun(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfGun = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfGun!
    }

    public class func imageOfBall(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), golden: Bool = false, colorInput: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBall(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), golden: golden, colorInput: colorInput)

        let imageOfBall = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBall!
    }

    public class func imageOfMenuIcon(frame: CGRect = CGRect(x: 0, y: 0, width: 125, height: 125), toggleVisibility: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawMenuIcon(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), toggleVisibility: toggleVisibility)

        let imageOfMenuIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfMenuIcon!
    }

    public class func imageOfEgg(frame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 70), golden: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawEgg(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), golden: golden)

        let imageOfEgg = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfEgg!
    }

    public class func imageOfStoreIcon(frame: CGRect = CGRect(x: 0, y: 0, width: 128, height: 128), store_icon_id: String = "ID_Restore") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawStoreIcon(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), store_icon_id: store_icon_id)

        let imageOfStoreIcon = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfStoreIcon!
    }

    public class func imageOfDailyTab(frame: CGRect = CGRect(x: 0, y: 5, width: 128, height: 120), isSelected: Bool = true, textSize: CGFloat = 12, bonus_str: String = "250 Credits", bonus_days: String = "Day: 1") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawDailyTab(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), isSelected: isSelected, textSize: textSize, bonus_str: bonus_str, bonus_days: bonus_days)

        let imageOfDailyTab = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfDailyTab!
    }

    public class func imageOfBuyButton(frame: CGRect = CGRect(x: 0, y: 0, width: 128, height: 128)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBuyButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfBuyButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBuyButton!
    }

    public class func imageOfBankButton(frame: CGRect = CGRect(x: 0, y: 0, width: 96, height: 96), addMoney: Bool = true, addAll: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBankButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), addMoney: addMoney, addAll: addAll)

        let imageOfBankButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBankButton!
    }

    public class func imageOfBox(frame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBox(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfBox = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBox!
    }

    public class func imageOfButton(frame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 90), textInput: String = "Hello, World!", textSize: CGFloat = 12) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), textInput: textInput, textSize: textSize)

        let imageOfButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfButton!
    }

    public class func imageOfBackButton(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 75)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawBackButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfBackButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfBackButton!
    }

    public class func imageOfSun(frame: CGRect = CGRect(x: 0, y: 0, width: 128, height: 128)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawSun(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfSun = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSun!
    }

    public class func imageOfNotificationBar(frame: CGRect = CGRect(x: 0, y: 5, width: 750, height: 100), textInput: String = "Hello, World!", textSize: CGFloat = 12) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawNotificationBar(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height), textInput: textInput, textSize: textSize)

        let imageOfNotificationBar = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfNotificationBar!
    }

    public class func imageOfStoreItemBox(frame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 120)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawStoreItemBox(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfStoreItemBox = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfStoreItemBox!
    }

    public class func imageOfSkybox(frame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawSkybox(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfSkybox = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSkybox!
    }

    public class func imageOfDailyBonus(frame: CGRect = CGRect(x: 0, y: 0, width: 640, height: 125)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            StyleKitName.drawDailyBonus(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfDailyBonus = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfDailyBonus!
    }

}



extension UIColor {
    func colorWithHue(newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func colorWithSaturation(newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, brightness: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func colorWithBrightness(newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func colorWithAlpha(newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1.0, saturation: CGFloat = 1.0, brightness: CGFloat = 1.0
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func colorWithHighlight(highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func colorWithShadow(shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1.0, green: CGFloat = 1.0, blue: CGFloat = 1.0, alpha: CGFloat = 1.0
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
